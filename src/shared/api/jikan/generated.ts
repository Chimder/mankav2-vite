/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Jikan API
 * [Jikan](https://jikan.moe) is an **Unofficial** MyAnimeList API.
It scrapes the website to satisfy the need for a complete API - which MyAnimeList lacks.

# Information

‚ö° Jikan is powered by its awesome backers - üôè [Become a backer](https://www.patreon.com/jikan)

## Rate Limiting

| Duration | Requests |
|----|----|
| Daily | **Unlimited** |
| Per Minute | 60 requests |
| Per Second | 3 requests |

Note: It's still possible to get rate limited from MyAnimeList.net instead.


## JSON Notes
- Any property (except arrays or objects) whose value does not exist or is undetermined, will be `null`.
- Any array or object property whose value does not exist or is undetermined, will be empty.
- Any `score` property whose value does not exist or is undetermined, will be `0`.
- All dates and timestamps are returned in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format and in UTC timezone

## Caching
By **CACHING**, we refer to the data parsed from MyAnimeList which is stored temporarily on our servers to provide better API performance.

All requests are cached for **24 hours**.

The following response headers will detail cache information.

| Header | Remarks |
| ---- | ---- |
| `Expires` | Cache expiry date |
| `Last-Modified` | Cache set date |
| `X-Request-Fingerprint` | Unique request fingerprint (only for cachable requests, not queries) |


Note: `X-Request-Fingerprint` will only be available on single resource requests and their child endpoints. e.g `/anime/1`, `/anime/1/relations`.
They won't be available on pages which perform queries, like /anime, or /top/anime, etc.

## Allowed HTTP(s) requests

**Jikan REST API does not provide authenticated requests for MyAnimeList.** This means you can not use it to update your anime/manga list.
Only GET requests are supported which return READ-ONLY data.

## HTTP Responses

All error responses are accompanied by a JSON Error response.

| Exception | HTTP Status | Remarks |
| ---- | ---- | ---- |
| N/A | `200 - OK` | The request was successful |
| N/A | `304 - Not Modified` | You have the latest data (Cache Validation response) |
| `BadRequestException`,`ValidationException` | `400 - Bad Request` | You've made an invalid request. Recheck documentation |
| `BadResponseException` | `404 - Not Found` | The resource was not found or MyAnimeList responded with a `404` |
| `BadRequestException` | `405 - Method Not Allowed` | Requested Method is not supported for resource. Only `GET` requests are allowed |
| `RateLimitException` | `429 - Too Many Request` | You are being rate limited by Jikan or MyAnimeList is rate-limiting our servers (specified in the error response) |
| `UpstreamException`,`ParserException`,etc. | `500 - Internal Server Error` | Something didn't work. Try again later. If you see an error response with a `report_url` URL, please click on it to open an auto-generated GitHub issue |
| `ServiceUnavailableException` | `503 - Service Unavailable` | In most cases this is intentionally done if the service is down for maintenance. |

## JSON Error Response

```json
 {
     "status": 500,
     "type": "InternalException",
     "message": "Exception Message",
     "error": "Exception Trace",
     "report_url": "https://github.com..."
  }
```

| Property | Remarks |
| ---- | ---- |
| `status` | Returned HTTP Status Code |
| `type` | Thrown Exception |
| `message` | Human-readable error message |
| `error` | Error response and trace from the API |
| `report_url` | Clicking this would redirect you to a generated GitHub issue |


## Cache Validation

- All requests return a `ETag` header which is an MD5 hash of the response
- You can use this hash to verify if there's new or updated content by suppliying it as the value for the `If-None-Match` in your next request header
- You will get a HTTP `304 - Not Modified` response if the content has not changed
- If the content has changed, you'll get a HTTP `200 - OK` response with the updated JSON response

![Cache Validation](https://i.imgur.com/925ozVn.png 'Cache Validation')

## Disclaimer

- Jikan is not affiliated with MyAnimeList.net.
- Jikan is a free, open-source API. Please use it responsibly.

----

By using the API, you are agreeing to Jikan's [terms of use](https://jikan.moe/terms) policy.

[v3 Documentation](https://jikan.docs.apiary.io/) - [Wrappers/SDKs](https://github.com/jikan-me/jikan#wrappers) - [Report an issue](https://github.com/jikan-me/jikan-rest/issues/new) - [Host your own server](https://github.com/jikan-me/jikan-rest)
 * OpenAPI spec version: 4.0.0
 */
import { jikanInstance } from './axios.instance';
export type GetWatchRecentPromosParams = {
page?: PageParameter;
};

export type GetUserClubsParams = {
page?: PageParameter;
};

export type GetUserRecommendationsParams = {
page?: PageParameter;
};

export type GetUserReviews200Data = GetUserReviews200DataAllOf & Pagination;

export type GetUserReviews200 = {
  data?: GetUserReviews200Data;
};

export type GetUserReviews200DataAllOfDataItemAnyOfFourAllOfTwo = {
  manga?: MangaMeta;
};

export type GetUserReviews200DataAllOfDataItemAnyOfFourAllOf = {
  user?: UserMeta;
};

export type GetUserReviews200DataAllOfDataItemAnyOfFour = GetUserReviews200DataAllOfDataItemAnyOfFourAllOf & GetUserReviews200DataAllOfDataItemAnyOfFourAllOfTwo & MangaReview;

export type GetUserReviews200DataAllOfDataItemAnyOfAllOfTwo = {
  anime?: AnimeMeta;
};

export type GetUserReviews200DataAllOfDataItemAnyOfAllOf = {
  user?: UserMeta;
};

export type GetUserReviews200DataAllOfDataItemAnyOf = GetUserReviews200DataAllOfDataItemAnyOfAllOf & GetUserReviews200DataAllOfDataItemAnyOfAllOfTwo & AnimeReview;

export type GetUserReviews200DataAllOfDataItem = GetUserReviews200DataAllOfDataItemAnyOf | GetUserReviews200DataAllOfDataItemAnyOfFour;

export type GetUserReviews200DataAllOf = {
  data?: GetUserReviews200DataAllOfDataItem[];
};

export type GetUserReviewsParams = {
page?: PageParameter;
};

export type GetUserMangaListParams = {
status?: UserMangaListStatusFilter;
};

export type GetUserAnimelistParams = {
status?: UserAnimeListStatusFilter;
};

export type GetUserFriendsParams = {
page?: PageParameter;
};

export type GetUserHistoryType = typeof GetUserHistoryType[keyof typeof GetUserHistoryType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUserHistoryType = {
  anime: 'anime',
  manga: 'manga',
} as const;

export type GetUserHistoryParams = {
type?: GetUserHistoryType;
};

export type GetUserFavorites200 = {
  data?: UserFavorites;
};

export type GetUserProfile200 = {
  data?: UserProfile;
};

export type GetUserFullProfile200 = {
  data?: UserProfileFull;
};

export type GetTopReviews200DataAllOf = {
  data?: GetTopReviews200DataAllOfDataItem[];
};

export type GetTopReviews200Data = GetTopReviews200DataAllOf & Pagination;

export type GetTopReviews200 = {
  data?: GetTopReviews200Data;
};

export type GetTopReviews200DataAllOfDataItemAnyOfFourAllOfTwo = {
  manga?: MangaMeta;
};

export type GetTopReviews200DataAllOfDataItemAnyOfFourAllOf = {
  user?: UserMeta;
};

export type GetTopReviews200DataAllOfDataItemAnyOfFour = GetTopReviews200DataAllOfDataItemAnyOfFourAllOf & GetTopReviews200DataAllOfDataItemAnyOfFourAllOfTwo & MangaReview;

export type GetTopReviews200DataAllOfDataItemAnyOf = GetTopReviews200DataAllOfDataItemAnyOfAllOf & GetTopReviews200DataAllOfDataItemAnyOfAllOfTwo & AnimeReview;

export type GetTopReviews200DataAllOfDataItem = GetTopReviews200DataAllOfDataItemAnyOf | GetTopReviews200DataAllOfDataItemAnyOfFour;

export type GetTopReviews200DataAllOfDataItemAnyOfAllOfTwo = {
  anime?: AnimeMeta;
};

export type GetTopReviews200DataAllOfDataItemAnyOfAllOf = {
  user?: UserMeta;
};

export type GetTopReviewsParams = {
page?: PageParameter;
type?: TopReviewsTypeEnum;
/**
 * Whether the results include preliminary reviews or not. Defaults to true.
 */
preliminary?: boolean;
/**
 * Whether the results include reviews with spoilers or not. Defaults to true.
 */
spoilers?: boolean;
};

export type GetTopCharactersParams = {
page?: PageParameter;
limit?: LimitParameter;
};

export type GetTopPeopleParams = {
page?: PageParameter;
limit?: LimitParameter;
};

export type GetTopMangaParams = {
type?: MangaSearchQueryType;
filter?: TopMangaFilter;
page?: PageParameter;
limit?: LimitParameter;
};

export type GetTopAnimeParams = {
type?: AnimeSearchQueryType;
filter?: TopAnimeFilter;
rating?: AnimeSearchQueryRating;
/**
 * Filter out Adult entries
 */
sfw?: boolean;
page?: PageParameter;
limit?: LimitParameter;
};

export type GetSeasonUpcomingFilter = typeof GetSeasonUpcomingFilter[keyof typeof GetSeasonUpcomingFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSeasonUpcomingFilter = {
  tv: 'tv',
  movie: 'movie',
  ova: 'ova',
  special: 'special',
  ona: 'ona',
  music: 'music',
} as const;

export type GetSeasonUpcomingParams = {
/**
 * Entry types
 */
filter?: GetSeasonUpcomingFilter;
/**
 * 'Safe For Work'. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: `?sfw`
 */
sfw?: SfwParameter;
/**
 * This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: `?unapproved`
 */
unapproved?: UnapprovedParameter;
/**
 * This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &#8243;TV (continuing)&#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) <br />Example usage: `?continuing`
 */
continuing?: ContinuingParameter;
page?: PageParameter;
limit?: LimitParameter;
};

export type GetSeasonFilter = typeof GetSeasonFilter[keyof typeof GetSeasonFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSeasonFilter = {
  tv: 'tv',
  movie: 'movie',
  ova: 'ova',
  special: 'special',
  ona: 'ona',
  music: 'music',
} as const;

export type GetSeasonParams = {
/**
 * Entry types
 */
filter?: GetSeasonFilter;
/**
 * 'Safe For Work'. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: `?sfw`
 */
sfw?: SfwParameter;
/**
 * This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: `?unapproved`
 */
unapproved?: UnapprovedParameter;
/**
 * This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &#8243;TV (continuing)&#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) <br />Example usage: `?continuing`
 */
continuing?: ContinuingParameter;
page?: PageParameter;
limit?: LimitParameter;
};

export type GetSeasonNowFilter = typeof GetSeasonNowFilter[keyof typeof GetSeasonNowFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSeasonNowFilter = {
  tv: 'tv',
  movie: 'movie',
  ova: 'ova',
  special: 'special',
  ona: 'ona',
  music: 'music',
} as const;

export type GetSeasonNowParams = {
/**
 * Entry types
 */
filter?: GetSeasonNowFilter;
/**
 * 'Safe For Work'. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: `?sfw`
 */
sfw?: SfwParameter;
/**
 * This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: `?unapproved`
 */
unapproved?: UnapprovedParameter;
/**
 * This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &#8243;TV (continuing)&#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) <br />Example usage: `?continuing`
 */
continuing?: ContinuingParameter;
page?: PageParameter;
limit?: LimitParameter;
};

export type GetProducersParams = {
page?: PageParameter;
limit?: LimitParameter;
q?: string;
order_by?: ProducersQueryOrderby;
sort?: SearchQuerySort;
/**
 * Return entries starting with the given letter
 */
letter?: string;
};

export type GetClubsSearchParams = {
page?: PageParameter;
limit?: LimitParameter;
q?: string;
type?: ClubSearchQueryType;
category?: ClubSearchQueryCategory;
order_by?: ClubSearchQueryOrderby;
sort?: SearchQuerySort;
/**
 * Return entries starting with the given letter
 */
letter?: string;
};

export type GetUserById200 = {
  data?: UserById;
};

export type GetUsersSearchParams = {
page?: PageParameter;
limit?: LimitParameter;
q?: string;
gender?: UsersSearchQueryGender;
location?: string;
maxAge?: number;
minAge?: number;
};

export type GetCharactersSearchParams = {
page?: PageParameter;
limit?: LimitParameter;
q?: string;
order_by?: CharactersSearchQueryOrderby;
sort?: SearchQuerySort;
/**
 * Return entries starting with the given letter
 */
letter?: string;
};

export type GetPeopleSearchParams = {
page?: PageParameter;
limit?: LimitParameter;
q?: string;
order_by?: PeopleSearchQueryOrderby;
sort?: SearchQuerySort;
/**
 * Return entries starting with the given letter
 */
letter?: string;
};

export type GetMangaSearchParams = {
/**
 * This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: `?unapproved`
 */
unapproved?: UnapprovedParameter;
page?: PageParameter;
limit?: LimitParameter;
q?: string;
type?: MangaSearchQueryType;
score?: number;
/**
 * Set a minimum score for results.
 */
min_score?: number;
/**
 * Set a maximum score for results
 */
max_score?: number;
status?: MangaSearchQueryStatus;
/**
 * Filter out Adult entries
 */
sfw?: boolean;
/**
 * Filter by genre(s) IDs. Can pass multiple with a comma as a delimiter. e.g 1,2,3
 */
genres?: string;
/**
 * Exclude genre(s) IDs. Can pass multiple with a comma as a delimiter. e.g 1,2,3
 */
genres_exclude?: string;
order_by?: MangaSearchQueryOrderby;
sort?: SearchQuerySort;
/**
 * Return entries starting with the given letter
 */
letter?: string;
/**
 * Filter by magazine(s) IDs. Can pass multiple with a comma as a delimiter. e.g 1,2,3
 */
magazines?: string;
/**
 * Filter by starting date. Format: YYYY-MM-DD. e.g `2022`, `2005-05`, `2005-01-01`
 */
start_date?: string;
/**
 * Filter by ending date. Format: YYYY-MM-DD. e.g `2022`, `2005-05`, `2005-01-01`
 */
end_date?: string;
};

export type GetAnimeSearchParams = {
/**
 * This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: `?unapproved`
 */
unapproved?: UnapprovedParameter;
page?: PageParameter;
limit?: LimitParameter;
q?: string;
type?: AnimeSearchQueryType;
score?: number;
/**
 * Set a minimum score for results.
 */
min_score?: number;
/**
 * Set a maximum score for results
 */
max_score?: number;
status?: AnimeSearchQueryStatus;
rating?: AnimeSearchQueryRating;
/**
 * Filter out Adult entries
 */
sfw?: boolean;
/**
 * Filter by genre(s) IDs. Can pass multiple with a comma as a delimiter. e.g 1,2,3
 */
genres?: string;
/**
 * Exclude genre(s) IDs. Can pass multiple with a comma as a delimiter. e.g 1,2,3
 */
genres_exclude?: string;
order_by?: AnimeSearchQueryOrderby;
sort?: SearchQuerySort;
/**
 * Return entries starting with the given letter
 */
letter?: string;
/**
 * Filter by producer(s) IDs. Can pass multiple with a comma as a delimiter. e.g 1,2,3
 */
producers?: string;
/**
 * Filter by starting date. Format: YYYY-MM-DD. e.g `2022`, `2005-05`, `2005-01-01`
 */
start_date?: string;
/**
 * Filter by ending date. Format: YYYY-MM-DD. e.g `2022`, `2005-05`, `2005-01-01`
 */
end_date?: string;
};

export type GetSchedulesSfw = typeof GetSchedulesSfw[keyof typeof GetSchedulesSfw];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSchedulesSfw = {
  true: 'true',
  false: 'false',
} as const;

export type GetSchedulesKids = typeof GetSchedulesKids[keyof typeof GetSchedulesKids];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSchedulesKids = {
  true: 'true',
  false: 'false',
} as const;

export type GetSchedulesFilter = typeof GetSchedulesFilter[keyof typeof GetSchedulesFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSchedulesFilter = {
  monday: 'monday',
  tuesday: 'tuesday',
  wednesday: 'wednesday',
  thursday: 'thursday',
  friday: 'friday',
  saturday: 'saturday',
  sunday: 'sunday',
  unknown: 'unknown',
  other: 'other',
} as const;

export type GetSchedulesParams = {
/**
 * Filter by day
 */
filter?: GetSchedulesFilter;
/**
 * When supplied, it will filter entries with the `Kids` Genre Demographic. When supplied as `kids=true`, it will return only Kid entries and when supplied as `kids=false`, it will filter out any Kid entries. Defaults to `false`.
 */
kids?: GetSchedulesKids;
/**
 * 'Safe For Work'. When supplied, it will filter entries with the `Hentai` Genre. When supplied as `sfw=true`, it will return only SFW entries and when supplied as `sfw=false`, it will filter out any Hentai entries. Defaults to `false`.
 */
sfw?: GetSchedulesSfw;
/**
 * This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: `?unapproved`
 */
unapproved?: UnapprovedParameter;
page?: PageParameter;
limit?: LimitParameter;
};

export type GetRecentMangaReviewsParams = {
page?: PageParameter;
/**
 * Any reviews left during an ongoing anime/manga, those reviews are tagged as preliminary. NOTE: Preliminary reviews are not returned by default so if the entry is airing/publishing you need to add this otherwise you will get an empty list. e.g usage: `?preliminary=true`
 */
preliminary?: PreliminaryParameter;
/**
 * Any reviews that are tagged as a spoiler. Spoiler reviews are not returned by default. e.g usage: `?spoiler=true`
 */
spoilers?: SpoilersParameter;
};

export type GetRecentAnimeReviewsParams = {
page?: PageParameter;
/**
 * Any reviews left during an ongoing anime/manga, those reviews are tagged as preliminary. NOTE: Preliminary reviews are not returned by default so if the entry is airing/publishing you need to add this otherwise you will get an empty list. e.g usage: `?preliminary=true`
 */
preliminary?: PreliminaryParameter;
/**
 * Any reviews that are tagged as a spoiler. Spoiler reviews are not returned by default. e.g usage: `?spoiler=true`
 */
spoilers?: SpoilersParameter;
};

export type GetRecentMangaRecommendationsParams = {
page?: PageParameter;
};

export type GetRecentAnimeRecommendationsParams = {
page?: PageParameter;
};

export type GetRandomUsers200 = {
  data?: UserProfile;
};

export type GetRandomPeople200 = {
  data?: Person;
};

export type GetRandomCharacters200 = {
  data?: Character;
};

export type GetRandomManga200 = {
  data?: Manga;
};

export type GetRandomAnime200 = {
  data?: Anime;
};

export type GetProducerFullById200 = {
  data?: ProducerFull;
};

export type GetProducerById200 = {
  data?: Producer;
};

export type GetPersonById200 = {
  data?: Person;
};

export type GetPersonFullById200 = {
  data?: PersonFull;
};

export type GetMangaRelations200 = {
  data?: Relation[];
};

export type GetMangaReviewsParams = {
page?: PageParameter;
/**
 * Any reviews left during an ongoing anime/manga, those reviews are tagged as preliminary. NOTE: Preliminary reviews are not returned by default so if the entry is airing/publishing you need to add this otherwise you will get an empty list. e.g usage: `?preliminary=true`
 */
preliminary?: PreliminaryParameter;
/**
 * Any reviews that are tagged as a spoiler. Spoiler reviews are not returned by default. e.g usage: `?spoiler=true`
 */
spoilers?: SpoilersParameter;
};

export type GetMangaUserUpdatesParams = {
page?: PageParameter;
};

export type GetMangaTopicsFilter = typeof GetMangaTopicsFilter[keyof typeof GetMangaTopicsFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMangaTopicsFilter = {
  all: 'all',
  episode: 'episode',
  other: 'other',
} as const;

export type GetMangaTopicsParams = {
/**
 * Filter topics
 */
filter?: GetMangaTopicsFilter;
};

export type GetMangaNewsParams = {
page?: PageParameter;
};

export type GetMangaById200 = {
  data?: Manga;
};

export type GetMangaFullById200 = {
  data?: MangaFull;
};

export type GetMagazinesParams = {
page?: PageParameter;
limit?: LimitParameter;
q?: string;
order_by?: MagazinesQueryOrderby;
sort?: SearchQuerySort;
/**
 * Return entries starting with the given letter
 */
letter?: string;
};

export type GetMangaGenresParams = {
filter?: GenreQueryFilter;
};

export type GetAnimeGenresParams = {
filter?: GenreQueryFilter;
};

export type GetClubMembers200 = Pagination & ClubMember;

export type GetClubMembersParams = {
page?: PageParameter;
};

export type GetClubsById200 = {
  data?: Club;
};

export type GetCharacterById200 = {
  data?: Character;
};

export type GetCharacterFullById200 = {
  data?: CharacterFull;
};

export type GetAnimeRelations200 = {
  data?: Relation[];
};

export type GetAnimeReviewsParams = {
page?: PageParameter;
/**
 * Any reviews left during an ongoing anime/manga, those reviews are tagged as preliminary. NOTE: Preliminary reviews are not returned by default so if the entry is airing/publishing you need to add this otherwise you will get an empty list. e.g usage: `?preliminary=true`
 */
preliminary?: PreliminaryParameter;
/**
 * Any reviews that are tagged as a spoiler. Spoiler reviews are not returned by default. e.g usage: `?spoiler=true`
 */
spoilers?: SpoilersParameter;
};

export type GetAnimeUserUpdatesParams = {
page?: PageParameter;
};

export type GetAnimeVideosEpisodesParams = {
page?: PageParameter;
};

export type GetAnimeForumFilter = typeof GetAnimeForumFilter[keyof typeof GetAnimeForumFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAnimeForumFilter = {
  all: 'all',
  episode: 'episode',
  other: 'other',
} as const;

export type GetAnimeForumParams = {
/**
 * Filter topics
 */
filter?: GetAnimeForumFilter;
};

export type GetAnimeNewsParams = {
page?: PageParameter;
};

export type GetAnimeEpisodeById200 = {
  data?: AnimeEpisode;
};

export type GetAnimeEpisodesParams = {
page?: PageParameter;
};

export type GetAnimeById200 = {
  data?: Anime;
};

export type GetAnimeFullById200 = {
  data?: AnimeFull;
};

/**
 * This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: `?unapproved`
 */
export type UnapprovedParameter = boolean;

/**
 * Any reviews that are tagged as a spoiler. Spoiler reviews are not returned by default. e.g usage: `?spoiler=true`
 */
export type SpoilersParameter = boolean;

/**
 * 'Safe For Work'. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: `?sfw`
 */
export type SfwParameter = boolean;

/**
 * Any reviews left during an ongoing anime/manga, those reviews are tagged as preliminary. NOTE: Preliminary reviews are not returned by default so if the entry is airing/publishing you need to add this otherwise you will get an empty list. e.g usage: `?preliminary=true`
 */
export type PreliminaryParameter = boolean;

export type PageParameter = number;

export type LimitParameter = number;

/**
 * This is a flag. When supplied it will include entries with the Kids genres in specific endpoints that filter them out by default. You do not need to pass a value to it. e.g usage: `?kids`
 */
export type KidsParameter = boolean;

/**
 * This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &#8243;TV (continuing)&#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) <br />Example usage: `?continuing`
 */
export type ContinuingParameter = boolean;

/**
 * Error: Bad request. When required parameters were not supplied.
 */
export type N400Response = void;

export type MangaUserupdatesAllOfDataItem = {
  /** Number of chapters read */
  chapters_read?: number;
  /** Total number of chapters */
  chapters_total?: number;
  /** Last updated date ISO8601 */
  date?: string;
  /**
   * User Score
   * @nullable
   */
  score?: number | null;
  /** User list status */
  status?: string;
  user?: UserMeta;
  /** Number of volumes read */
  volumes_read?: number;
  /** Total number of volumes */
  volumes_total?: number;
};

export type MangaUserupdatesAllOf = {
  data?: MangaUserupdatesAllOfDataItem[];
};

/**
 * Manga User Updates Resource
 */
export type MangaUserupdates = MangaUserupdatesAllOf & Pagination;

export type AnimeUserupdatesAllOfDataItem = {
  /** Last updated date ISO8601 */
  date?: string;
  /**
   * Number of episodes seen
   * @nullable
   */
  episodes_seen?: number | null;
  /**
   * Total number of episodes
   * @nullable
   */
  episodes_total?: number | null;
  /**
   * User Score
   * @nullable
   */
  score?: number | null;
  /** User list status */
  status?: string;
  user?: UserMeta;
};

export type AnimeUserupdatesAllOf = {
  data?: AnimeUserupdatesAllOfDataItem[];
};

/**
 * Anime User Updates Resource
 */
export type AnimeUserupdates = AnimeUserupdatesAllOf & Pagination;

export type StreamingLinksDataItem = {
  name?: string;
  url?: string;
};

/**
 * Streaming links
 */
export interface StreamingLinks {
  data?: StreamingLinksDataItem[];
}

/**
 * Manga Reviews Resource
 */
export type MangaReviews = MangaReviewsAllOf & Pagination;

export type MangaReviewsAllOfDataItemAllOf = {
  user?: UserMeta;
};

export type MangaReviewsAllOfDataItem = MangaReviewsAllOfDataItemAllOf & MangaReview;

export type MangaReviewsAllOf = {
  data?: MangaReviewsAllOfDataItem[];
};

/**
 * Anime Reviews Resource
 */
export type AnimeReviews = AnimeReviewsAllOf & Pagination;

export type AnimeReviewsAllOfDataItemAllOf = {
  user?: UserMeta;
};

export type AnimeReviewsAllOfDataItem = AnimeReviewsAllOfDataItemAllOf & AnimeReview;

export type AnimeReviewsAllOf = {
  data?: AnimeReviewsAllOfDataItem[];
};

/**
 * User reaction count on the review
 */
export type AnimeReviewReactions = {
  /** Confusing reaction count */
  confusing?: number;
  /** Creative reaction count */
  creative?: number;
  /** Funny reaction count */
  funny?: number;
  /** Informative reaction count */
  informative?: number;
  /** Love it reaction count */
  love_it?: number;
  /** Nice reaction count */
  nice?: number;
  /** Overall reaction count */
  overall?: number;
  /** Well written reaction count */
  well_written?: number;
};

export interface AnimeReview {
  /** Review created date ISO8601 */
  date?: string;
  /** Number of episodes watched */
  episodes_watched?: number;
  /** The review was made before the entry was completed */
  is_preliminary?: boolean;
  /** The review contains spoiler */
  is_spoiler?: boolean;
  /** MyAnimeList ID */
  mal_id?: number;
  /** User reaction count on the review */
  reactions?: AnimeReviewReactions;
  /** Review content */
  review?: string;
  /** Number of user votes on the Review */
  score?: number;
  /** Review tags */
  tags?: string[];
  /** Entry type */
  type?: string;
  /** MyAnimeList review URL */
  url?: string;
}

/**
 * User reaction count on the review
 */
export type MangaReviewReactions = {
  /** Confusing reaction count */
  confusing?: number;
  /** Creative reaction count */
  creative?: number;
  /** Funny reaction count */
  funny?: number;
  /** Informative reaction count */
  informative?: number;
  /** Love it reaction count */
  love_it?: number;
  /** Nice reaction count */
  nice?: number;
  /** Overall reaction count */
  overall?: number;
  /** Well written reaction count */
  well_written?: number;
};

export interface MangaReview {
  /** Review created date ISO8601 */
  date?: string;
  /** The review was made before the entry was completed */
  is_preliminary?: boolean;
  /** The review contains spoiler */
  is_spoiler?: boolean;
  /** MyAnimeList ID */
  mal_id?: number;
  /** User reaction count on the review */
  reactions?: MangaReviewReactions;
  /** Review content */
  review?: string;
  /** Number of user votes on the Review */
  score?: number;
  /** Review tags */
  tags?: string[];
  /** Entry type */
  type?: string;
  /** MyAnimeList review URL */
  url?: string;
}

export type EntryRecommendationsDataItemEntry = AnimeMeta | MangaMeta;

export type EntryRecommendationsDataItem = {
  entry?: EntryRecommendationsDataItemEntry;
};

/**
 * Entry Recommendations Resource
 */
export interface EntryRecommendations {
  data?: EntryRecommendationsDataItem[];
}

export type RecommendationsAllOfDataItemEntryItem = AnimeMeta | MangaMeta;

export type RecommendationsAllOfDataItem = {
  /** Recommendation context provided by the user */
  content?: string;
  /** Array of 2 entries that are being recommended to each other */
  entry?: RecommendationsAllOfDataItemEntryItem[];
  /** MAL IDs of recommendations is both of the MAL ID's with a `-` delimiter */
  mal_id?: string;
  user?: UserById;
};

export type RecommendationsAllOf = {
  data?: RecommendationsAllOfDataItem[];
};

/**
 * Recommendations
 */
export type Recommendations = RecommendationsAllOf & Pagination;

export interface UserStatistics {
  data?: UserStatisticsData;
}

/**
 * Manga Statistics
 */
export type UserStatisticsDataManga = {
  /** Number of Manga Chapters Read */
  chapters_read?: number;
  /** Manga Completed */
  completed?: number;
  /** Number of days spent reading Manga */
  days_read?: number;
  /** Manga Dropped */
  dropped?: number;
  /** Mean Score */
  mean_score?: number;
  /** Manga On-Hold */
  on_hold?: number;
  /** Manga Planned to Read */
  plan_to_read?: number;
  /** Manga Reading */
  reading?: number;
  /** Manga re-read */
  reread?: number;
  /** Total Manga entries on User list */
  total_entries?: number;
  /** Number of Manga Volumes Read */
  volumes_read?: number;
};

/**
 * Anime Statistics
 */
export type UserStatisticsDataAnime = {
  /** Anime Completed */
  completed?: number;
  /** Number of days spent watching Anime */
  days_watched?: number;
  /** Anime Dropped */
  dropped?: number;
  /** Number of Anime Episodes Watched */
  episodes_watched?: number;
  /** Mean Score */
  mean_score?: number;
  /** Anime On-Hold */
  on_hold?: number;
  /** Anime Planned to Watch */
  plan_to_watch?: number;
  /** Anime re-watched */
  rewatched?: number;
  /** Total Anime entries on User list */
  total_entries?: number;
  /** Anime Watching */
  watching?: number;
};

export type UserStatisticsData = {
  /** Anime Statistics */
  anime?: UserStatisticsDataAnime;
  /** Manga Statistics */
  manga?: UserStatisticsDataManga;
};

/**
 * Transform the resource into an array.
 */
export interface UsersTemp {
  data?: UsersTempDataItem[];
}

/**
 * Manga Stats
 */
export type UsersTempDataItemMangaStats = {
  /** Number of Manga Chapters Read */
  chapters_read?: number;
  /** Manga Completed */
  completed?: number;
  /** Number of days spent reading Manga */
  days_read?: number;
  /** Manga Dropped */
  dropped?: number;
  /** Mean Score */
  mean_score?: number;
  /** Manga On-Hold */
  on_hold?: number;
  /** Manga Planned to Read */
  plan_to_read?: number;
  /** Manga Reading */
  reading?: number;
  /** Manga re-read */
  reread?: number;
  /** Total Manga entries on User list */
  total_entries?: number;
  /** Number of Manga Volumes Read */
  volumes_read?: number;
};

/**
 * Available images in WEBP
 */
export type UsersTempDataItemImagesWebp = {
  /** Image URL WEBP (225x335) */
  image_url?: string;
};

/**
 * Available images in JPG
 */
export type UsersTempDataItemImagesJpg = {
  /** Image URL JPG (225x335) */
  image_url?: string;
};

/**
 * Images
 */
export type UsersTempDataItemImages = {
  /** Available images in JPG */
  jpg?: UsersTempDataItemImagesJpg;
  /** Available images in WEBP */
  webp?: UsersTempDataItemImagesWebp;
};

/**
 * Favorite entries
 */
export type UsersTempDataItemFavorites = {
  /** Favorite Anime */
  anime?: EntryMeta[];
  /** Favorite Characters */
  characters?: EntryMeta[];
  /** Favorite Manga */
  manga?: EntryMeta[];
  /** Favorite People */
  people?: EntryMeta[];
};

/**
 * Anime Stats
 */
export type UsersTempDataItemAnimeStats = {
  /** Anime Completed */
  completed?: number;
  /** Number of days spent watching Anime */
  days_watched?: number;
  /** Anime Dropped */
  dropped?: number;
  /** Number of Anime Episodes Watched */
  episodes_watched?: number;
  /** Mean Score */
  mean_score?: number;
  /** Anime On-Hold */
  on_hold?: number;
  /** Anime Planned to Watch */
  plan_to_watch?: number;
  /** Anime re-watched */
  rewatched?: number;
  /** Total Anime entries on User list */
  total_entries?: number;
  /** Anime Watching */
  watching?: number;
};

export type UsersTempDataItem = {
  /** User About. NOTE: About information is customizable by users through BBCode on MyAnimeList. This means users can add multimedia content, different text sizes, etc. Due to this freeform, Jikan returns parsed HTML. Validate on your end! */
  about?: string;
  /** Anime Stats */
  anime_stats?: UsersTempDataItemAnimeStats;
  /** Birthday Date ISO8601 */
  birthday?: string;
  /** Favorite entries */
  favorites?: UsersTempDataItemFavorites;
  /** User Gender */
  gender?: string;
  /** Images */
  images?: UsersTempDataItemImages;
  /** Joined Date ISO8601 */
  joined?: string;
  /** Last Online Date ISO8601 */
  last_online?: string;
  /** Location */
  location?: string;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Manga Stats */
  manga_stats?: UsersTempDataItemMangaStats;
  /** MyAnimeList URL */
  url?: string;
  /** MyAnimeList Username */
  username?: string;
};

export interface UserProfile {
  /**
   * Birthday Date ISO8601
   * @nullable
   */
  birthday?: string | null;
  /**
   * User Gender
   * @nullable
   */
  gender?: string | null;
  images?: UserImages;
  /**
   * Joined Date ISO8601
   * @nullable
   */
  joined?: string | null;
  /**
   * Last Online Date ISO8601
   * @nullable
   */
  last_online?: string | null;
  /**
   * Location
   * @nullable
   */
  location?: string | null;
  /**
   * MyAnimeList ID
   * @nullable
   */
  mal_id?: number | null;
  /** MyAnimeList URL */
  url?: string;
  /** MyAnimeList Username */
  username?: string;
}

export interface UserUpdates {
  data?: UserUpdatesData;
}

export type UserUpdatesDataMangaItemAllOfTwo = {
  /** @nullable */
  chapters_read?: number | null;
  /** @nullable */
  chapters_total?: number | null;
  /** ISO8601 format */
  date?: string;
  /** @nullable */
  score?: number | null;
  status?: string;
  /** @nullable */
  volumes_read?: number | null;
  /** @nullable */
  volumes_total?: number | null;
};

export type UserUpdatesDataMangaItemAllOf = {
  entry?: MangaMeta;
};

export type UserUpdatesDataMangaItem = UserUpdatesDataMangaItemAllOf & UserUpdatesDataMangaItemAllOfTwo;

export type UserUpdatesDataAnimeItemAllOfTwo = {
  /** ISO8601 format */
  date?: string;
  /** @nullable */
  episodes_seen?: number | null;
  /** @nullable */
  episodes_total?: number | null;
  /** @nullable */
  score?: number | null;
  status?: string;
};

export type UserUpdatesDataAnimeItemAllOf = {
  entry?: AnimeMeta;
};

export type UserUpdatesDataAnimeItem = UserUpdatesDataAnimeItemAllOf & UserUpdatesDataAnimeItemAllOfTwo;

export type UserUpdatesData = {
  /** Last updated Anime */
  anime?: UserUpdatesDataAnimeItem[];
  /** Last updated Manga */
  manga?: UserUpdatesDataMangaItem[];
};

/**
 * Transform the resource into an array.
 */
export interface History {
  /** Date ISO8601 */
  date?: string;
  entry?: MalUrl;
  /** Number of episodes/chapters watched/read */
  increment?: number;
}

export interface UserHistory {
  data?: History[];
}

/**
 * Manga Statistics
 */
export type UserProfileFullStatisticsManga = {
  /** Number of Manga Chapters Read */
  chapters_read?: number;
  /** Manga Completed */
  completed?: number;
  /** Number of days spent reading Manga */
  days_read?: number;
  /** Manga Dropped */
  dropped?: number;
  /** Mean Score */
  mean_score?: number;
  /** Manga On-Hold */
  on_hold?: number;
  /** Manga Planned to Read */
  plan_to_read?: number;
  /** Manga Reading */
  reading?: number;
  /** Manga re-read */
  reread?: number;
  /** Total Manga entries on User list */
  total_entries?: number;
  /** Number of Manga Volumes Read */
  volumes_read?: number;
};

/**
 * Anime Statistics
 */
export type UserProfileFullStatisticsAnime = {
  /** Anime Completed */
  completed?: number;
  /** Number of days spent watching Anime */
  days_watched?: number;
  /** Anime Dropped */
  dropped?: number;
  /** Number of Anime Episodes Watched */
  episodes_watched?: number;
  /** Mean Score */
  mean_score?: number;
  /** Anime On-Hold */
  on_hold?: number;
  /** Anime Planned to Watch */
  plan_to_watch?: number;
  /** Anime re-watched */
  rewatched?: number;
  /** Total Anime entries on User list */
  total_entries?: number;
  /** Anime Watching */
  watching?: number;
};

export type UserProfileFullStatistics = {
  /** Anime Statistics */
  anime?: UserProfileFullStatisticsAnime;
  /** Manga Statistics */
  manga?: UserProfileFullStatisticsManga;
};

export type UserProfileFullExternalItem = {
  name?: string;
  url?: string;
};

/**
 * Transform the resource into an array.
 */
export interface UserProfileFull {
  /**
   * Birthday Date ISO8601
   * @nullable
   */
  birthday?: string | null;
  external?: UserProfileFullExternalItem[];
  /**
   * User Gender
   * @nullable
   */
  gender?: string | null;
  images?: UserImages;
  /**
   * Joined Date ISO8601
   * @nullable
   */
  joined?: string | null;
  /**
   * Last Online Date ISO8601
   * @nullable
   */
  last_online?: string | null;
  /**
   * Location
   * @nullable
   */
  location?: string | null;
  /**
   * MyAnimeList ID
   * @nullable
   */
  mal_id?: number | null;
  statistics?: UserProfileFullStatistics;
  /** MyAnimeList URL */
  url?: string;
  /** MyAnimeList Username */
  username?: string;
}

export type UserFavoritesMangaItemAllOf = {
  start_year?: number;
  type?: string;
};

export type UserFavoritesMangaItem = UserFavoritesMangaItemAllOf & MangaMeta;

export type UserFavoritesCharactersItem = CharacterMeta & MalUrl2;

export type UserFavoritesAnimeItemAllOf = {
  start_year?: number;
  type?: string;
};

export type UserFavoritesAnimeItem = UserFavoritesAnimeItemAllOf & AnimeMeta;

export interface UserFavorites {
  /** Favorite Anime */
  anime?: UserFavoritesAnimeItem[];
  /** Favorite Characters */
  characters?: UserFavoritesCharactersItem[];
  /** Favorite Manga */
  manga?: UserFavoritesMangaItem[];
  /** Favorite People */
  people?: CharacterMeta[];
}

export type UserAboutDataItem = {
  /**
   * User About. NOTE: About information is customizable by users through BBCode on MyAnimeList. This means users can add multimedia content, different text sizes, etc. Due to this freeform, Jikan returns parsed HTML. Validate on your end!
   * @nullable
   */
  about?: string | null;
};

export interface UserAbout {
  data?: UserAboutDataItem[];
}

/**
 * Producers Resource
 */
export interface Producer {
  /**
   * About the Producer
   * @nullable
   */
  about?: string | null;
  /** Producers's anime count */
  count?: number;
  /**
   * Established Date ISO8601
   * @nullable
   */
  established?: string | null;
  /** Producers's member favorites count */
  favorites?: number;
  images?: CommonImages;
  /** MyAnimeList ID */
  mal_id?: number;
  /** All titles */
  titles?: Title[];
  /** MyAnimeList URL */
  url?: string;
}

export type ProducerFullExternalItem = {
  name?: string;
  url?: string;
};

/**
 * Producers Resource
 */
export interface ProducerFull {
  /**
   * About the Producer
   * @nullable
   */
  about?: string | null;
  /** Producers's anime count */
  count?: number;
  /**
   * Established Date ISO8601
   * @nullable
   */
  established?: string | null;
  external?: ProducerFullExternalItem[];
  /** Producers's member favorites count */
  favorites?: number;
  images?: CommonImages;
  /** MyAnimeList ID */
  mal_id?: number;
  /** All titles */
  titles?: Title[];
  /** MyAnimeList URL */
  url?: string;
}

export type ProducersAllOf = {
  data?: Producer[];
};

/**
 * Producers Collection Resource
 */
export type Producers = ProducersAllOf & Pagination;

export type PicturesVariantsDataItem = {
  images?: CommonImages;
};

/**
 * Pictures Resource
 */
export interface PicturesVariants {
  data?: PicturesVariantsDataItem[];
}

export type PicturesDataItem = {
  images?: AnimeImages;
};

/**
 * Pictures Resource
 */
export interface Pictures {
  data?: PicturesDataItem[];
}

export type PersonVoiceActingRolesDataItem = {
  anime?: AnimeMeta;
  character?: CharacterMeta;
  /** Person's Character's role in the anime */
  role?: string;
};

/**
 * Person's voice acting roles
 */
export interface PersonVoiceActingRoles {
  data?: PersonVoiceActingRolesDataItem[];
}

/**
 * Person Resource
 */
export interface Person {
  /**
   * Biography
   * @nullable
   */
  about?: string | null;
  /** Other Names */
  alternate_names?: string[];
  /**
   * Birthday Date ISO8601
   * @nullable
   */
  birthday?: string | null;
  /**
   * Family Name
   * @nullable
   */
  family_name?: string | null;
  /** Number of users who have favorited this entry */
  favorites?: number;
  /**
   * Given Name
   * @nullable
   */
  given_name?: string | null;
  images?: PeopleImages;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Name */
  name?: string;
  /** MyAnimeList URL */
  url?: string;
  /**
   * Person's website URL
   * @nullable
   */
  website_url?: string | null;
}

export type PersonMangaDataItem = {
  manga?: MangaMeta;
  /** Person's position */
  position?: string;
};

/**
 * Person's mangaography
 */
export interface PersonManga {
  data?: PersonMangaDataItem[];
}

export type PersonFullVoicesItem = {
  anime?: AnimeMeta;
  character?: CharacterMeta;
  /** Person's Character's role in the anime */
  role?: string;
};

export type PersonFullMangaItem = {
  manga?: MangaMeta;
  /** Person's position */
  position?: string;
};

export type PersonFullAnimeItem = {
  anime?: AnimeMeta;
  /** Person's position */
  position?: string;
};

/**
 * Person Resource
 */
export interface PersonFull {
  /**
   * Biography
   * @nullable
   */
  about?: string | null;
  /** Other Names */
  alternate_names?: string[];
  anime?: PersonFullAnimeItem[];
  /**
   * Birthday Date ISO8601
   * @nullable
   */
  birthday?: string | null;
  /**
   * Family Name
   * @nullable
   */
  family_name?: string | null;
  /** Number of users who have favorited this entry */
  favorites?: number;
  /**
   * Given Name
   * @nullable
   */
  given_name?: string | null;
  images?: PeopleImages;
  /** MyAnimeList ID */
  mal_id?: number;
  manga?: PersonFullMangaItem[];
  /** Name */
  name?: string;
  /** MyAnimeList URL */
  url?: string;
  voices?: PersonFullVoicesItem[];
  /**
   * Person's website URL
   * @nullable
   */
  website_url?: string | null;
}

export type PeopleSearchAllOf = {
  data?: Person[];
};

/**
 * People Search
 */
export type PeopleSearch = PeopleSearchAllOf & PaginationPlus;

export type PersonAnimeDataItem = {
  anime?: AnimeMeta;
  /** Person's position */
  position?: string;
};

/**
 * Person anime staff positions
 */
export interface PersonAnime {
  data?: PersonAnimeDataItem[];
}

export type NewsDataItem = {
  /** Author Profile URL */
  author_url?: string;
  /** Author MyAnimeList Username */
  author_username?: string;
  /** Comment count */
  comments?: number;
  /** Post Date ISO8601 */
  date?: string;
  /** Excerpt */
  excerpt?: string;
  /** Forum topic URL */
  forum_url?: string;
  images?: CommonImages;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Title */
  title?: string;
  /** MyAnimeList URL */
  url?: string;
};

export interface News {
  data?: NewsDataItem[];
}

export type MoreinfoData = {
  /**
   * Additional information on the entry
   * @nullable
   */
  moreinfo?: string | null;
};

/**
 * More Info Resource
 */
export interface Moreinfo {
  data?: MoreinfoData;
}

export type MangaStatisticsDataScoresItem = {
  /** Percentage of votes for this score */
  percentage?: number;
  /** Scoring value */
  score?: number;
  /** Number of votes for this score */
  votes?: number;
};

export type MangaStatisticsData = {
  /** Number of users who have completed the resource */
  completed?: number;
  /** Number of users who have dropped the resource */
  dropped?: number;
  /** Number of users who have put the resource on hold */
  on_hold?: number;
  /** Number of users who have planned to read the resource */
  plan_to_read?: number;
  /** Number of users reading the resource */
  reading?: number;
  scores?: MangaStatisticsDataScoresItem[];
  /** Total number of users who have the resource added to their lists */
  total?: number;
};

/**
 * Manga Statistics Resource
 */
export interface MangaStatistics {
  data?: MangaStatisticsData;
}

/**
 * Manga Type
 * @nullable
 */
export type MangaType = typeof MangaType[keyof typeof MangaType] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MangaType = {
  Manga: 'Manga',
  Novel: 'Novel',
  Light_Novel: 'Light Novel',
  'One-shot': 'One-shot',
  Doujinshi: 'Doujinshi',
  Manhua: 'Manhua',
  Manhwa: 'Manhwa',
  OEL: 'OEL',
} as const;

/**
 * Publishing status
 */
export type MangaStatus = typeof MangaStatus[keyof typeof MangaStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MangaStatus = {
  Finished: 'Finished',
  Publishing: 'Publishing',
  On_Hiatus: 'On Hiatus',
  Discontinued: 'Discontinued',
  Not_yet_published: 'Not yet published',
} as const;

/**
 * Manga Type
 * @nullable
 */
export type MangaFullType = typeof MangaFullType[keyof typeof MangaFullType] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MangaFullType = {
  Manga: 'Manga',
  Novel: 'Novel',
  Light_Novel: 'Light Novel',
  'One-shot': 'One-shot',
  Doujinshi: 'Doujinshi',
  Manhua: 'Manhua',
  Manhwa: 'Manhwa',
  OEL: 'OEL',
} as const;

/**
 * Publishing status
 */
export type MangaFullStatus = typeof MangaFullStatus[keyof typeof MangaFullStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MangaFullStatus = {
  Finished: 'Finished',
  Publishing: 'Publishing',
  On_Hiatus: 'On Hiatus',
  Discontinued: 'Discontinued',
  Not_yet_published: 'Not yet published',
} as const;

export type MangaFullRelationsItem = {
  entry?: MalUrl[];
  /** Relation type */
  relation?: string;
};

export type MangaFullExternalItem = {
  name?: string;
  url?: string;
};

/**
 * Manga Resource
 */
export interface MangaFull {
  /** Whether the entry is pending approval on MAL or not */
  approved?: boolean;
  authors?: MalUrl[];
  /**
   * Background
   * @nullable
   */
  background?: string | null;
  /**
   * Chapter count
   * @nullable
   */
  chapters?: number | null;
  demographics?: MalUrl[];
  explicit_genres?: MalUrl[];
  external?: MangaFullExternalItem[];
  /**
   * Number of users who have favorited this entry
   * @nullable
   */
  favorites?: number | null;
  genres?: MalUrl[];
  images?: MangaImages;
  /** MyAnimeList ID */
  mal_id?: number;
  /**
   * Number of users who have added this entry to their list
   * @nullable
   */
  members?: number | null;
  /**
   * Popularity
   * @nullable
   */
  popularity?: number | null;
  published?: Daterange;
  /** Publishing boolean */
  publishing?: boolean;
  /**
   * Ranking
   * @nullable
   */
  rank?: number | null;
  relations?: MangaFullRelationsItem[];
  /**
   * Score
   * @nullable
   */
  score?: number | null;
  /**
   * Number of users
   * @nullable
   */
  scored_by?: number | null;
  serializations?: MalUrl[];
  /** Publishing status */
  status?: MangaFullStatus;
  /**
   * Synopsis
   * @nullable
   */
  synopsis?: string | null;
  themes?: MalUrl[];
  /**
   * Title
   * @deprecated
   */
  title?: string;
  /**
   * English Title
   * @deprecated
   * @nullable
   */
  title_english?: string | null;
  /**
   * Japanese Title
   * @deprecated
   * @nullable
   */
  title_japanese?: string | null;
  /**
   * Other Titles
   * @deprecated
   */
  title_synonyms?: string[];
  /** All Titles */
  titles?: Title[];
  /**
   * Manga Type
   * @nullable
   */
  type?: MangaFullType;
  /** MyAnimeList URL */
  url?: string;
  /**
   * Volume count
   * @nullable
   */
  volumes?: number | null;
}

export type MangaSearchAllOf = {
  data?: Manga[];
};

/**
 * Manga Search Resource
 */
export type MangaSearch = MangaSearchAllOf & PaginationPlus;

export type MangaCharactersDataItem = {
  character?: CharacterMeta;
  /** Character's Role */
  role?: string;
};

/**
 * Manga Characters Resource
 */
export interface MangaCharacters {
  data?: MangaCharactersDataItem[];
}

/**
 * Magazine Resource
 */
export interface Magazine {
  /** Magazine's manga count */
  count?: number;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Magazine Name */
  name?: string;
  /** MyAnimeList URL */
  url?: string;
}

export type MagazinesAllOf = {
  data?: Magazine[];
};

/**
 * Magazine Collection Resource
 */
export type Magazines = MagazinesAllOf & Pagination;

/**
 * Genre Resource
 */
export interface Genre {
  /** Genre's entry count */
  count?: number;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Genre Name */
  name?: string;
  /** MyAnimeList URL */
  url?: string;
}

/**
 * Genres Collection Resource
 */
export interface Genres {
  data?: Genre[];
}

/**
 * Last comment details
 */
export type ForumDataItemLastComment = {
  /** Author Profile URL */
  author_url?: string;
  /** Author MyAnimeList Username */
  author_username?: string;
  /**
   * Last comment date posted ISO8601
   * @nullable
   */
  date?: string | null;
  /** Last comment URL */
  url?: string;
};

export type ForumDataItem = {
  /** Author Profile URL */
  author_url?: string;
  /** Author MyAnimeList Username */
  author_username?: string;
  /** Comment count */
  comments?: number;
  /** Post Date ISO8601 */
  date?: string;
  /** Last comment details */
  last_comment?: ForumDataItemLastComment;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Title */
  title?: string;
  /** MyAnimeList URL */
  url?: string;
};

/**
 * Forum Resource
 */
export interface Forum {
  data?: ForumDataItem[];
}

export type ExternalLinksDataItem = {
  name?: string;
  url?: string;
};

/**
 * External links
 */
export interface ExternalLinks {
  data?: ExternalLinksDataItem[];
}

export interface Title {
  /** Title value */
  title?: string;
  /** Title type */
  type?: string;
}

/**
 * Manga Resource
 */
export interface Manga {
  /** Whether the entry is pending approval on MAL or not */
  approved?: boolean;
  authors?: MalUrl[];
  /**
   * Background
   * @nullable
   */
  background?: string | null;
  /**
   * Chapter count
   * @nullable
   */
  chapters?: number | null;
  demographics?: MalUrl[];
  explicit_genres?: MalUrl[];
  /**
   * Number of users who have favorited this entry
   * @nullable
   */
  favorites?: number | null;
  genres?: MalUrl[];
  images?: MangaImages;
  /** MyAnimeList ID */
  mal_id?: number;
  /**
   * Number of users who have added this entry to their list
   * @nullable
   */
  members?: number | null;
  /**
   * Popularity
   * @nullable
   */
  popularity?: number | null;
  published?: Daterange;
  /** Publishing boolean */
  publishing?: boolean;
  /**
   * Ranking
   * @nullable
   */
  rank?: number | null;
  /**
   * Score
   * @nullable
   */
  score?: number | null;
  /**
   * Number of users
   * @nullable
   */
  scored_by?: number | null;
  serializations?: MalUrl[];
  /** Publishing status */
  status?: MangaStatus;
  /**
   * Synopsis
   * @nullable
   */
  synopsis?: string | null;
  themes?: MalUrl[];
  /**
   * Title
   * @deprecated
   */
  title?: string;
  /**
   * English Title
   * @deprecated
   * @nullable
   */
  title_english?: string | null;
  /**
   * Japanese Title
   * @deprecated
   * @nullable
   */
  title_japanese?: string | null;
  /** All Titles */
  titles?: Title[];
  /**
   * Manga Type
   * @nullable
   */
  type?: MangaType;
  /** MyAnimeList URL */
  url?: string;
  /**
   * Volume count
   * @nullable
   */
  volumes?: number | null;
}

/**
 * Available images in JPG
 */
export type CommonImagesJpg = {
  /**
   * Image URL JPG
   * @nullable
   */
  image_url?: string | null;
};

export interface CommonImages {
  /** Available images in JPG */
  jpg?: CommonImagesJpg;
}

/**
 * Available images in JPG
 */
export type PeopleImagesJpg = {
  /**
   * Image URL JPG
   * @nullable
   */
  image_url?: string | null;
};

export interface PeopleImages {
  /** Available images in JPG */
  jpg?: PeopleImagesJpg;
}

/**
 * Available images in WEBP
 */
export type CharacterImagesWebp = {
  /**
   * Image URL WEBP
   * @nullable
   */
  image_url?: string | null;
  /**
   * Small Image URL WEBP
   * @nullable
   */
  small_image_url?: string | null;
};

/**
 * Available images in JPG
 */
export type CharacterImagesJpg = {
  /**
   * Image URL JPG
   * @nullable
   */
  image_url?: string | null;
  /**
   * Small Image URL JPG
   * @nullable
   */
  small_image_url?: string | null;
};

export interface CharacterImages {
  /** Available images in JPG */
  jpg?: CharacterImagesJpg;
  /** Available images in WEBP */
  webp?: CharacterImagesWebp;
}

/**
 * Available images in WEBP
 */
export type MangaImagesWebp = {
  /**
   * Image URL WEBP
   * @nullable
   */
  image_url?: string | null;
  /**
   * Image URL WEBP
   * @nullable
   */
  large_image_url?: string | null;
  /**
   * Small Image URL WEBP
   * @nullable
   */
  small_image_url?: string | null;
};

/**
 * Available images in JPG
 */
export type MangaImagesJpg = {
  /**
   * Image URL JPG
   * @nullable
   */
  image_url?: string | null;
  /**
   * Image URL JPG
   * @nullable
   */
  large_image_url?: string | null;
  /**
   * Small Image URL JPG
   * @nullable
   */
  small_image_url?: string | null;
};

export interface MangaImages {
  /** Available images in JPG */
  jpg?: MangaImagesJpg;
  /** Available images in WEBP */
  webp?: MangaImagesWebp;
}

/**
 * Available images in WEBP
 */
export type AnimeImagesWebp = {
  /**
   * Image URL WEBP
   * @nullable
   */
  image_url?: string | null;
  /**
   * Image URL WEBP
   * @nullable
   */
  large_image_url?: string | null;
  /**
   * Small Image URL WEBP
   * @nullable
   */
  small_image_url?: string | null;
};

/**
 * Available images in JPG
 */
export type AnimeImagesJpg = {
  /**
   * Image URL JPG
   * @nullable
   */
  image_url?: string | null;
  /**
   * Image URL JPG
   * @nullable
   */
  large_image_url?: string | null;
  /**
   * Small Image URL JPG
   * @nullable
   */
  small_image_url?: string | null;
};

export interface AnimeImages {
  /** Available images in JPG */
  jpg?: AnimeImagesJpg;
  /** Available images in WEBP */
  webp?: AnimeImagesWebp;
}

export interface PersonMeta {
  images?: PeopleImages;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Entry name */
  name?: string;
  /** MyAnimeList URL */
  url?: string;
}

export interface CharacterMeta {
  images?: CharacterImages;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Entry name */
  name?: string;
  /** MyAnimeList URL */
  url?: string;
}

export interface MangaMeta {
  images?: MangaImages;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Entry title */
  title?: string;
  /** MyAnimeList URL */
  url?: string;
}

export interface AnimeMeta {
  images?: AnimeImages;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Entry title */
  title?: string;
  /** MyAnimeList URL */
  url?: string;
}

/**
 * Available images in WEBP
 */
export type UserImagesWebp = {
  /**
   * Image URL WEBP
   * @nullable
   */
  image_url?: string | null;
};

/**
 * Available images in JPG
 */
export type UserImagesJpg = {
  /**
   * Image URL JPG
   * @nullable
   */
  image_url?: string | null;
};

export interface UserImages {
  /** Available images in JPG */
  jpg?: UserImagesJpg;
  /** Available images in WEBP */
  webp?: UserImagesWebp;
}

/**
 * User Meta By ID
 */
export interface UserById {
  /** MyAnimeList URL */
  url?: string;
  /** MyAnimeList Username */
  username?: string;
}

export interface UserMeta {
  images?: UserImages;
  /** MyAnimeList Profile URL */
  url?: string;
  /** MyAnimeList Username */
  username?: string;
}

export type PaginationPlusPaginationItems = {
  count?: number;
  per_page?: number;
  total?: number;
};

export type PaginationPlusPagination = {
  has_next_page?: boolean;
  items?: PaginationPlusPaginationItems;
  last_visible_page?: number;
};

export interface PaginationPlus {
  pagination?: PaginationPlusPagination;
}

export type PaginationPagination = {
  has_next_page?: boolean;
  last_visible_page?: number;
};

export interface Pagination {
  pagination?: PaginationPagination;
}

/**
 * Entry Meta data
 */
export interface EntryMeta {
  /** Image URL */
  image_url?: string;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Entry Name/Title */
  name?: string;
  /** MyAnimeList URL */
  url?: string;
}

/**
 * Parsed URL Data
 */
export interface MalUrl2 {
  /** MyAnimeList ID */
  mal_id?: number;
  /** Resource Name/Title */
  title?: string;
  /** Type of resource */
  type?: string;
  /** MyAnimeList URL */
  url?: string;
}

/**
 * Parsed URL Data
 */
export interface MalUrl {
  /** MyAnimeList ID */
  mal_id?: number;
  /** Resource Name/Title */
  name?: string;
  /** Type of resource */
  type?: string;
  /** MyAnimeList URL */
  url?: string;
}

/**
 * Related resources
 */
export interface Relation {
  /** Related entries */
  entry?: MalUrl[];
  /** Relation type */
  relation?: string;
}

/**
 * Broadcast Details
 */
export interface Broadcast {
  /**
   * Day of the week
   * @nullable
   */
  day?: string | null;
  /**
   * Raw parsed broadcast string
   * @nullable
   */
  string?: string | null;
  /**
   * Time in 24 hour format
   * @nullable
   */
  time?: string | null;
  /**
   * Timezone (Tz Database format https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   * @nullable
   */
  timezone?: string | null;
}

/**
 * Date Prop To
 */
export type DaterangePropTo = {
  /**
   * Day
   * @nullable
   */
  day?: number | null;
  /**
   * Month
   * @nullable
   */
  month?: number | null;
  /**
   * Year
   * @nullable
   */
  year?: number | null;
};

/**
 * Date Prop From
 */
export type DaterangePropFrom = {
  /**
   * Day
   * @nullable
   */
  day?: number | null;
  /**
   * Month
   * @nullable
   */
  month?: number | null;
  /**
   * Year
   * @nullable
   */
  year?: number | null;
};

/**
 * Date Prop
 */
export type DaterangeProp = {
  /** Date Prop From */
  from?: DaterangePropFrom;
  /**
   * Raw parsed string
   * @nullable
   */
  string?: string | null;
  /** Date Prop To */
  to?: DaterangePropTo;
};

/**
 * Date range
 */
export interface Daterange {
  /**
   * Date ISO8601
   * @nullable
   */
  from?: string | null;
  /** Date Prop */
  prop?: DaterangeProp;
  /**
   * Date ISO8601
   * @nullable
   */
  to?: string | null;
}

export type TrailerImagesImages = {
  /**
   * Default Image Size URL (120x90)
   * @nullable
   */
  image_url?: string | null;
  /**
   * Large Image Size URL (480x360)
   * @nullable
   */
  large_image_url?: string | null;
  /**
   * Maximum Image Size URL (1280x720)
   * @nullable
   */
  maximum_image_url?: string | null;
  /**
   * Medium Image Size URL (320x180)
   * @nullable
   */
  medium_image_url?: string | null;
  /**
   * Small Image Size URL (640x480)
   * @nullable
   */
  small_image_url?: string | null;
};

/**
 * Youtube Images
 */
export interface TrailerImages {
  images?: TrailerImagesImages;
}

/**
 * Youtube Details
 */
export interface TrailerBase {
  /**
   * Parsed Embed URL
   * @nullable
   */
  embed_url?: string | null;
  /**
   * YouTube URL
   * @nullable
   */
  url?: string | null;
  /**
   * YouTube ID
   * @nullable
   */
  youtube_id?: string | null;
}

/**
 * Youtube Details
 */
export type Trailer = TrailerBase & TrailerImages;

export type ClubStaffDataItem = {
  /** User URL */
  url?: string;
  /** User's username */
  username?: string;
};

/**
 * Club Staff Resource
 */
export interface ClubStaff {
  data?: ClubStaffDataItem[];
}

/**
 * Club Category
 */
export type ClubCategory = typeof ClubCategory[keyof typeof ClubCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClubCategory = {
  'actors_&_artists': 'actors & artists',
  anime: 'anime',
  characters: 'characters',
  'cities_&_neighborhoods': 'cities & neighborhoods',
  companies: 'companies',
  conventions: 'conventions',
  games: 'games',
  japan: 'japan',
  manga: 'manga',
  music: 'music',
  others: 'others',
  schools: 'schools',
} as const;

/**
 * Club access
 */
export type ClubAccess = typeof ClubAccess[keyof typeof ClubAccess];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClubAccess = {
  public: 'public',
  private: 'private',
  secret: 'secret',
} as const;

/**
 * Club Resource
 */
export interface Club {
  /** Club access */
  access?: ClubAccess;
  /** Club Category */
  category?: ClubCategory;
  /** Date Created ISO8601 */
  created?: string;
  images?: CommonImages;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Number of club members */
  members?: number;
  /** Club name */
  name?: string;
  /** Club URL */
  url?: string;
}

export type ClubRelationsData = {
  anime?: MalUrl[];
  characters?: MalUrl[];
  manga?: MalUrl[];
};

/**
 * Club Relations
 */
export interface ClubRelations {
  data?: ClubRelationsData;
}

export type ClubsSearchAllOf = {
  data?: Club[];
};

/**
 * Clubs Search Resource
 */
export type ClubsSearch = ClubsSearchAllOf & Pagination;

export type CharacterVoiceActorsDataItem = {
  /** Character's Role */
  language?: string;
  person?: PersonMeta;
};

/**
 * Character voice actors
 */
export interface CharacterVoiceActors {
  data?: CharacterVoiceActorsDataItem[];
}

/**
 * Character Resource
 */
export interface Character {
  /**
   * Biography
   * @nullable
   */
  about?: string | null;
  /** Number of users who have favorited this entry */
  favorites?: number;
  images?: CharacterImages;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Name */
  name?: string;
  /**
   * Name
   * @nullable
   */
  name_kanji?: string | null;
  /** Other Names */
  nicknames?: string[];
  /** MyAnimeList URL */
  url?: string;
}

export type CharacterMangaDataItem = {
  manga?: MangaMeta;
  /** Character's Role */
  role?: string;
};

/**
 * Character casted in manga
 */
export interface CharacterManga {
  data?: CharacterMangaDataItem[];
}

export type CharacterFullVoicesItem = {
  /** Character's Role */
  language?: string;
  person?: PersonMeta;
};

export type CharacterFullMangaItem = {
  manga?: MangaMeta;
  /** Character's Role */
  role?: string;
};

export type CharacterFullAnimeItem = {
  anime?: AnimeMeta;
  /** Character's Role */
  role?: string;
};

/**
 * Character Resource
 */
export interface CharacterFull {
  /**
   * Biography
   * @nullable
   */
  about?: string | null;
  anime?: CharacterFullAnimeItem[];
  /** Number of users who have favorited this entry */
  favorites?: number;
  images?: CharacterImages;
  /** MyAnimeList ID */
  mal_id?: number;
  manga?: CharacterFullMangaItem[];
  /** Name */
  name?: string;
  /**
   * Name
   * @nullable
   */
  name_kanji?: string | null;
  /** Other Names */
  nicknames?: string[];
  /** MyAnimeList URL */
  url?: string;
  voices?: CharacterFullVoicesItem[];
}

export type CharactersSearchAllOf = {
  data?: Character[];
};

/**
 * Characters Search Resource
 */
export type CharactersSearch = CharactersSearchAllOf & PaginationPlus;

export type CharacterAnimeDataItem = {
  anime?: AnimeMeta;
  /** Character's Role */
  role?: string;
};

/**
 * Character casted in anime
 */
export interface CharacterAnime {
  data?: CharacterAnimeDataItem[];
}

/**
 * Anime Videos Resource
 */
export interface AnimeVideos {
  data?: AnimeVideosData;
}

export type AnimeVideosDataPromoItem = {
  /** Title */
  title?: string;
  trailer?: Trailer;
};

export type AnimeVideosDataMusicVideosItemMeta = {
  /** @nullable */
  author?: string | null;
  /** @nullable */
  title?: string | null;
};

export type AnimeVideosDataMusicVideosItem = {
  meta?: AnimeVideosDataMusicVideosItemMeta;
  /** Title */
  title?: string;
  video?: Trailer;
};

export type AnimeVideosDataEpisodesItem = {
  /** Episode */
  episode?: string;
  images?: CommonImages;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Title */
  title?: string;
  /** MyAnimeList URL */
  url?: string;
};

export type AnimeVideosData = {
  episodes?: AnimeVideosDataEpisodesItem[];
  music_videos?: AnimeVideosDataMusicVideosItem[];
  promo?: AnimeVideosDataPromoItem[];
};

export type AnimeThemesData = {
  endings?: string[];
  openings?: string[];
};

/**
 * Anime Opening and Ending Themes
 */
export interface AnimeThemes {
  data?: AnimeThemesData;
}

export type AnimeStatisticsDataScoresItem = {
  /** Percentage of votes for this score */
  percentage?: number;
  /** Scoring value */
  score?: number;
  /** Number of votes for this score */
  votes?: number;
};

export type AnimeStatisticsData = {
  /** Number of users who have completed the resource */
  completed?: number;
  /** Number of users who have dropped the resource */
  dropped?: number;
  /** Number of users who have put the resource on hold */
  on_hold?: number;
  /** Number of users who have planned to watch the resource */
  plan_to_watch?: number;
  scores?: AnimeStatisticsDataScoresItem[];
  /** Total number of users who have the resource added to their lists */
  total?: number;
  /** Number of users watching the resource */
  watching?: number;
};

/**
 * Anime Statistics Resource
 */
export interface AnimeStatistics {
  data?: AnimeStatisticsData;
}

/**
 * Person details
 */
export type AnimeStaffDataItemPerson = {
  images?: PeopleImages;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Name */
  name?: string;
  /** MyAnimeList URL */
  url?: string;
};

export type AnimeStaffDataItem = {
  /** Person details */
  person?: AnimeStaffDataItemPerson;
  /** Staff Positions */
  positions?: string[];
};

/**
 * Anime Staff Resource
 */
export interface AnimeStaff {
  data?: AnimeStaffDataItem[];
}

/**
 * Anime Type
 * @nullable
 */
export type AnimeType = typeof AnimeType[keyof typeof AnimeType] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeType = {
  TV: 'TV',
  OVA: 'OVA',
  Movie: 'Movie',
  Special: 'Special',
  ONA: 'ONA',
  Music: 'Music',
} as const;

/**
 * Airing status
 * @nullable
 */
export type AnimeStatus = typeof AnimeStatus[keyof typeof AnimeStatus] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeStatus = {
  Finished_Airing: 'Finished Airing',
  Currently_Airing: 'Currently Airing',
  Not_yet_aired: 'Not yet aired',
} as const;

/**
 * Season
 * @nullable
 */
export type AnimeSeason = typeof AnimeSeason[keyof typeof AnimeSeason] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeSeason = {
  summer: 'summer',
  winter: 'winter',
  spring: 'spring',
  fall: 'fall',
} as const;

/**
 * Anime audience rating
 * @nullable
 */
export type AnimeRating = typeof AnimeRating[keyof typeof AnimeRating] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeRating = {
  'G_-_All_Ages': 'G - All Ages',
  'PG_-_Children': 'PG - Children',
  'PG-13_-_Teens_13_or_older': 'PG-13 - Teens 13 or older',
  'R_-_17+_(violence_&_profanity)': 'R - 17+ (violence & profanity)',
  'R+_-_Mild_Nudity': 'R+ - Mild Nudity',
  'Rx_-_Hentai': 'Rx - Hentai',
} as const;

/**
 * Anime Resource
 */
export interface Anime {
  aired?: Daterange;
  /** Airing boolean */
  airing?: boolean;
  /** Whether the entry is pending approval on MAL or not */
  approved?: boolean;
  /**
   * Background
   * @nullable
   */
  background?: string | null;
  broadcast?: Broadcast;
  demographics?: MalUrl[];
  /**
   * Parsed raw duration
   * @nullable
   */
  duration?: string | null;
  /**
   * Episode count
   * @nullable
   */
  episodes?: number | null;
  explicit_genres?: MalUrl[];
  /**
   * Number of users who have favorited this entry
   * @nullable
   */
  favorites?: number | null;
  genres?: MalUrl[];
  images?: AnimeImages;
  licensors?: MalUrl[];
  /** MyAnimeList ID */
  mal_id?: number;
  /**
   * Number of users who have added this entry to their list
   * @nullable
   */
  members?: number | null;
  /**
   * Popularity
   * @nullable
   */
  popularity?: number | null;
  producers?: MalUrl[];
  /**
   * Ranking
   * @nullable
   */
  rank?: number | null;
  /**
   * Anime audience rating
   * @nullable
   */
  rating?: AnimeRating;
  /**
   * Score
   * @nullable
   */
  score?: number | null;
  /**
   * Number of users
   * @nullable
   */
  scored_by?: number | null;
  /**
   * Season
   * @nullable
   */
  season?: AnimeSeason;
  /**
   * Original Material/Source adapted from
   * @nullable
   */
  source?: string | null;
  /**
   * Airing status
   * @nullable
   */
  status?: AnimeStatus;
  studios?: MalUrl[];
  /**
   * Synopsis
   * @nullable
   */
  synopsis?: string | null;
  themes?: MalUrl[];
  /**
   * Title
   * @deprecated
   */
  title?: string;
  /**
   * English Title
   * @deprecated
   * @nullable
   */
  title_english?: string | null;
  /**
   * Japanese Title
   * @deprecated
   * @nullable
   */
  title_japanese?: string | null;
  /**
   * Other Titles
   * @deprecated
   */
  title_synonyms?: string[];
  /** All titles */
  titles?: Title[];
  trailer?: TrailerBase;
  /**
   * Anime Type
   * @nullable
   */
  type?: AnimeType;
  /** MyAnimeList URL */
  url?: string;
  /**
   * Year
   * @nullable
   */
  year?: number | null;
}

export type AnimeRelationsDataItem = {
  entry?: MalUrl[];
  /** Relation type */
  relation?: string;
};

/**
 * Anime Relations
 */
export interface AnimeRelations {
  data?: AnimeRelationsDataItem[];
}

/**
 * Anime Type
 * @nullable
 */
export type AnimeFullType = typeof AnimeFullType[keyof typeof AnimeFullType] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeFullType = {
  TV: 'TV',
  OVA: 'OVA',
  Movie: 'Movie',
  Special: 'Special',
  ONA: 'ONA',
  Music: 'Music',
} as const;

export type AnimeFullTheme = {
  endings?: string[];
  openings?: string[];
};

export type AnimeFullStreamingItem = {
  name?: string;
  url?: string;
};

/**
 * Airing status
 * @nullable
 */
export type AnimeFullStatus = typeof AnimeFullStatus[keyof typeof AnimeFullStatus] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeFullStatus = {
  Finished_Airing: 'Finished Airing',
  Currently_Airing: 'Currently Airing',
  Not_yet_aired: 'Not yet aired',
} as const;

/**
 * Season
 * @nullable
 */
export type AnimeFullSeason = typeof AnimeFullSeason[keyof typeof AnimeFullSeason] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeFullSeason = {
  summer: 'summer',
  winter: 'winter',
  spring: 'spring',
  fall: 'fall',
} as const;

export type AnimeFullRelationsItem = {
  entry?: MalUrl[];
  /** Relation type */
  relation?: string;
};

/**
 * Anime audience rating
 * @nullable
 */
export type AnimeFullRating = typeof AnimeFullRating[keyof typeof AnimeFullRating] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeFullRating = {
  'G_-_All_Ages': 'G - All Ages',
  'PG_-_Children': 'PG - Children',
  'PG-13_-_Teens_13_or_older': 'PG-13 - Teens 13 or older',
  'R_-_17+_(violence_&_profanity)': 'R - 17+ (violence & profanity)',
  'R+_-_Mild_Nudity': 'R+ - Mild Nudity',
  'Rx_-_Hentai': 'Rx - Hentai',
} as const;

export type AnimeFullExternalItem = {
  name?: string;
  url?: string;
};

/**
 * Full anime Resource
 */
export interface AnimeFull {
  aired?: Daterange;
  /** Airing boolean */
  airing?: boolean;
  /** Whether the entry is pending approval on MAL or not */
  approved?: boolean;
  /**
   * Background
   * @nullable
   */
  background?: string | null;
  broadcast?: Broadcast;
  demographics?: MalUrl[];
  /**
   * Parsed raw duration
   * @nullable
   */
  duration?: string | null;
  /**
   * Episode count
   * @nullable
   */
  episodes?: number | null;
  explicit_genres?: MalUrl[];
  external?: AnimeFullExternalItem[];
  /**
   * Number of users who have favorited this entry
   * @nullable
   */
  favorites?: number | null;
  genres?: MalUrl[];
  images?: AnimeImages;
  licensors?: MalUrl[];
  /** MyAnimeList ID */
  mal_id?: number;
  /**
   * Number of users who have added this entry to their list
   * @nullable
   */
  members?: number | null;
  /**
   * Popularity
   * @nullable
   */
  popularity?: number | null;
  producers?: MalUrl[];
  /**
   * Ranking
   * @nullable
   */
  rank?: number | null;
  /**
   * Anime audience rating
   * @nullable
   */
  rating?: AnimeFullRating;
  relations?: AnimeFullRelationsItem[];
  /**
   * Score
   * @nullable
   */
  score?: number | null;
  /**
   * Number of users
   * @nullable
   */
  scored_by?: number | null;
  /**
   * Season
   * @nullable
   */
  season?: AnimeFullSeason;
  /**
   * Original Material/Source adapted from
   * @nullable
   */
  source?: string | null;
  /**
   * Airing status
   * @nullable
   */
  status?: AnimeFullStatus;
  streaming?: AnimeFullStreamingItem[];
  studios?: MalUrl[];
  /**
   * Synopsis
   * @nullable
   */
  synopsis?: string | null;
  theme?: AnimeFullTheme;
  themes?: MalUrl[];
  /**
   * Title
   * @deprecated
   */
  title?: string;
  /**
   * English Title
   * @deprecated
   * @nullable
   */
  title_english?: string | null;
  /**
   * Japanese Title
   * @deprecated
   * @nullable
   */
  title_japanese?: string | null;
  /**
   * Other Titles
   * @deprecated
   */
  title_synonyms?: string[];
  /** All titles */
  titles?: Title[];
  trailer?: TrailerBase;
  /**
   * Anime Type
   * @nullable
   */
  type?: AnimeFullType;
  /** MyAnimeList URL */
  url?: string;
  /**
   * Year
   * @nullable
   */
  year?: number | null;
}

/**
 * Anime Episode Resource
 */
export interface AnimeEpisode {
  /**
   * Aired Date ISO8601
   * @nullable
   */
  aired?: string | null;
  /**
   * Episode duration in seconds
   * @nullable
   */
  duration?: number | null;
  /** Filler episode */
  filler?: boolean;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Recap episode */
  recap?: boolean;
  /**
   * Episode Synopsis
   * @nullable
   */
  synopsis?: string | null;
  /** Title */
  title?: string;
  /**
   * Title Japanese
   * @nullable
   */
  title_japanese?: string | null;
  /**
   * title_romanji
   * @nullable
   */
  title_romanji?: string | null;
  /** MyAnimeList URL */
  url?: string;
}

export type AnimeSearchAllOf = {
  data?: Anime[];
};

/**
 * Anime Collection Resource
 */
export type AnimeSearch = AnimeSearchAllOf & PaginationPlus;

/**
 * Anime Characters Resource
 */
export interface AnimeCharacters {
  data?: AnimeCharactersDataItem[];
}

export type AnimeCharactersDataItemVoiceActorsItemPerson = {
  images?: PeopleImages;
  mal_id?: number;
  name?: string;
  url?: string;
};

export type AnimeCharactersDataItemVoiceActorsItem = {
  language?: string;
  person?: AnimeCharactersDataItemVoiceActorsItemPerson;
};

/**
 * Character details
 */
export type AnimeCharactersDataItemCharacter = {
  images?: CharacterImages;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Character Name */
  name?: string;
  /** MyAnimeList URL */
  url?: string;
};

export type AnimeCharactersDataItem = {
  /** Character details */
  character?: AnimeCharactersDataItemCharacter;
  /** Character's Role */
  role?: string;
  voice_actors?: AnimeCharactersDataItemVoiceActorsItem[];
};

/**
 * Watch Promos
 */
export type WatchPromos = Pagination & WatchPromosAllOf;

export type WatchPromosAllOfAllOfTwoDataItem = {
  entry?: AnimeMeta;
  trailer?: Trailer[];
};

export type WatchPromosAllOfAllOfTwo = {
  data?: WatchPromosAllOfAllOfTwoDataItem[];
};

export type WatchPromosAllOfAllOf = {
  /** Promo Title */
  title?: string;
};

export type WatchPromosAllOf = WatchPromosAllOfAllOf & WatchPromosAllOfAllOfTwo;

export type WatchEpisodesAllOfDataItemEpisodesItem = {
  /** MyAnimeList ID */
  mal_id?: string;
  /** For MyAnimeList Premium Users */
  premium?: boolean;
  /** Episode Title */
  title?: string;
  /** MyAnimeList URL */
  url?: string;
};

export type WatchEpisodesAllOfDataItem = {
  entry?: AnimeMeta;
  /** Recent Episodes (max 2 listed) */
  episodes?: WatchEpisodesAllOfDataItemEpisodesItem[];
  /** Region Locked Episode */
  region_locked?: boolean;
};

export type WatchEpisodesAllOf = {
  data?: WatchEpisodesAllOfDataItem[];
};

/**
 * Watch Episodes
 */
export type WatchEpisodes = WatchEpisodesAllOf & Pagination;

export type UserClubsAllOfDataItem = {
  /** MyAnimeList ID */
  mal_id?: number;
  /** Club Name */
  name?: string;
  /** Club URL */
  url?: string;
};

export type UserClubsAllOf = {
  data?: UserClubsAllOfDataItem[];
};

/**
 * User Clubs
 */
export type UserClubs = UserClubsAllOf & Pagination;

export type UserFriendsAllOf = {
  data?: UserFriendsAllOfDataItem[];
};

/**
 * User Friends
 */
export type UserFriends = UserFriendsAllOf & Pagination;

export type UserFriendsAllOfDataItemAllOfTwo = {
  /** Friends Since Date ISO8601 format */
  friends_since?: string;
  /** Last Online Date ISO8601 format */
  last_online?: string;
};

export type UserFriendsAllOfDataItemAllOf = {
  user?: UserMeta;
};

export type UserFriendsAllOfDataItem = UserFriendsAllOfDataItemAllOf & UserFriendsAllOfDataItemAllOfTwo;

export type ReviewsCollectionDataItem = AnimeReview | MangaReview;

/**
 * Anime & Manga Reviews Resource
 */
export interface ReviewsCollection {
  data?: ReviewsCollectionDataItem[];
}

export type SeasonsDataItem = {
  /** List of available seasons */
  seasons?: string[];
  /** Year */
  year?: number;
};

/**
 * List of available seasons
 */
export interface Seasons {
  data?: SeasonsDataItem[];
}

export type UsersSearchAllOfDataItem = {
  images?: UserImages;
  /** Last Online Date ISO8601 */
  last_online?: string;
  /** MyAnimeList URL */
  url?: string;
  /** MyAnimeList Username */
  username?: string;
};

export type UsersSearchAllOf = {
  data?: UsersSearchAllOfDataItem[];
};

/**
 * User Results
 */
export type UsersSearch = UsersSearchAllOf & Pagination;

export type SchedulesAllOf = {
  data?: Anime[];
};

/**
 * Anime resources currently airing
 */
export type Schedules = SchedulesAllOf & PaginationPlus;

export type RandomDataItem = Anime | Manga | Character | Person;

/**
 * Random Resources
 */
export interface Random {
  data?: RandomDataItem[];
}

/**
 * Character Pictures
 */
export interface PersonPictures {
  data?: PeopleImages[];
}

/**
 * Manga Pictures
 */
export interface MangaPictures {
  data?: MangaImages[];
}

/**
 * Manga News Resource
 */
export type MangaNews = Pagination & News;

export type ClubMemberDataItem = {
  images?: UserImages;
  /** User URL */
  url?: string;
  /** User's username */
  username?: string;
};

/**
 * Club Member
 */
export interface ClubMember {
  data?: ClubMemberDataItem[];
}

export type CharacterPicturesDataItem = {
  /**
   * Default JPG Image Size URL
   * @nullable
   */
  image_url?: string | null;
  /**
   * Large JPG Image Size URL
   * @nullable
   */
  large_image_url?: string | null;
};

/**
 * Character Pictures
 */
export interface CharacterPictures {
  data?: CharacterPicturesDataItem[];
}

export type AnimeVideosEpisodesAllOfDataItem = {
  /** Episode Subtitle */
  episode?: string;
  images?: CommonImages;
  /** MyAnimeList ID or Episode Number */
  mal_id?: number;
  /** Episode Title */
  title?: string;
  /** Episode Page URL */
  url?: string;
};

export type AnimeVideosEpisodesAllOf = {
  data?: AnimeVideosEpisodesAllOfDataItem[];
};

/**
 * Anime Videos Episodes Resource
 */
export type AnimeVideosEpisodes = AnimeVideosEpisodesAllOf & Pagination;

/**
 * Anime News Resource
 */
export type AnimeNews = Pagination & News;

/**
 * Anime Episodes Resource
 */
export type AnimeEpisodes = AnimeEpisodesAllOf & Pagination;

/**
 * Aggregated episode score (1.00 - 5.00) based on MyAnimeList user voting
 * @minimum 1
 * @maximum 5
 * @nullable
 */
export type AnimeEpisodesAllOfDataItemScore = unknown | null;

export type AnimeEpisodesAllOfDataItem = {
  /**
   * Aired Date ISO8601
   * @nullable
   */
  aired?: string | null;
  /** Filler episode */
  filler?: boolean;
  /**
   * Episode discussion forum URL
   * @nullable
   */
  forum_url?: string | null;
  /** MyAnimeList ID */
  mal_id?: number;
  /** Recap episode */
  recap?: boolean;
  /**
   * Aggregated episode score (1.00 - 5.00) based on MyAnimeList user voting
   * @minimum 1
   * @maximum 5
   * @nullable
   */
  score?: AnimeEpisodesAllOfDataItemScore;
  /** Title */
  title?: string;
  /**
   * Title Japanese
   * @nullable
   */
  title_japanese?: string | null;
  /**
   * title_romanji
   * @nullable
   */
  title_romanji?: string | null;
  /**
   * MyAnimeList URL. This is the URL of the episode's video. If there is no video url, this will be null.
   * @nullable
   */
  url?: string | null;
};

export type AnimeEpisodesAllOf = {
  data?: AnimeEpisodesAllOfDataItem[];
};

/**
 * The type of reviews to filter by. Defaults to anime.
 */
export type TopReviewsTypeEnum = typeof TopReviewsTypeEnum[keyof typeof TopReviewsTypeEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TopReviewsTypeEnum = {
  anime: 'anime',
  manga: 'manga',
} as const;

/**
 * Top items filter types
 */
export type TopMangaFilter = typeof TopMangaFilter[keyof typeof TopMangaFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TopMangaFilter = {
  publishing: 'publishing',
  upcoming: 'upcoming',
  bypopularity: 'bypopularity',
  favorite: 'favorite',
} as const;

/**
 * Top items filter types
 */
export type TopAnimeFilter = typeof TopAnimeFilter[keyof typeof TopAnimeFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TopAnimeFilter = {
  airing: 'airing',
  upcoming: 'upcoming',
  bypopularity: 'bypopularity',
  favorite: 'favorite',
} as const;

/**
 * Search query sort direction
 */
export type SearchQuerySort = typeof SearchQuerySort[keyof typeof SearchQuerySort];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchQuerySort = {
  desc: 'desc',
  asc: 'asc',
} as const;

/**
 * Producers Search Query Order By
 */
export type ProducersQueryOrderby = typeof ProducersQueryOrderby[keyof typeof ProducersQueryOrderby];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProducersQueryOrderby = {
  mal_id: 'mal_id',
  count: 'count',
  favorites: 'favorites',
  established: 'established',
} as const;

/**
 * Available People order_by properties
 */
export type PeopleSearchQueryOrderby = typeof PeopleSearchQueryOrderby[keyof typeof PeopleSearchQueryOrderby];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PeopleSearchQueryOrderby = {
  mal_id: 'mal_id',
  name: 'name',
  birthday: 'birthday',
  favorites: 'favorites',
} as const;

/**
 * Available Manga types
 */
export type MangaSearchQueryType = typeof MangaSearchQueryType[keyof typeof MangaSearchQueryType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MangaSearchQueryType = {
  manga: 'manga',
  novel: 'novel',
  lightnovel: 'lightnovel',
  oneshot: 'oneshot',
  doujin: 'doujin',
  manhwa: 'manhwa',
  manhua: 'manhua',
} as const;

/**
 * Available Manga statuses
 */
export type MangaSearchQueryStatus = typeof MangaSearchQueryStatus[keyof typeof MangaSearchQueryStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MangaSearchQueryStatus = {
  publishing: 'publishing',
  complete: 'complete',
  hiatus: 'hiatus',
  discontinued: 'discontinued',
  upcoming: 'upcoming',
} as const;

/**
 * Available Manga order_by properties
 */
export type MangaSearchQueryOrderby = typeof MangaSearchQueryOrderby[keyof typeof MangaSearchQueryOrderby];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MangaSearchQueryOrderby = {
  mal_id: 'mal_id',
  title: 'title',
  start_date: 'start_date',
  end_date: 'end_date',
  chapters: 'chapters',
  volumes: 'volumes',
  score: 'score',
  scored_by: 'scored_by',
  rank: 'rank',
  popularity: 'popularity',
  members: 'members',
  favorites: 'favorites',
} as const;

/**
 * User's anime list status filter options
 */
export type UserMangaListStatusFilter = typeof UserMangaListStatusFilter[keyof typeof UserMangaListStatusFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserMangaListStatusFilter = {
  all: 'all',
  reading: 'reading',
  completed: 'completed',
  onhold: 'onhold',
  dropped: 'dropped',
  plantoread: 'plantoread',
} as const;

/**
 * Order by magazine data
 */
export type MagazinesQueryOrderby = typeof MagazinesQueryOrderby[keyof typeof MagazinesQueryOrderby];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MagazinesQueryOrderby = {
  mal_id: 'mal_id',
  name: 'name',
  count: 'count',
} as const;

/**
 * Filter genres by type
 */
export type GenreQueryFilter = typeof GenreQueryFilter[keyof typeof GenreQueryFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GenreQueryFilter = {
  genres: 'genres',
  explicit_genres: 'explicit_genres',
  themes: 'themes',
  demographics: 'demographics',
} as const;

/**
 * Users Search Query Gender.
 */
export type UsersSearchQueryGender = typeof UsersSearchQueryGender[keyof typeof UsersSearchQueryGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersSearchQueryGender = {
  any: 'any',
  male: 'male',
  female: 'female',
  nonbinary: 'nonbinary',
} as const;

/**
 * Club Search Query Type
 */
export type ClubSearchQueryType = typeof ClubSearchQueryType[keyof typeof ClubSearchQueryType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClubSearchQueryType = {
  public: 'public',
  private: 'private',
  secret: 'secret',
} as const;

/**
 * Club Search Query OrderBy
 */
export type ClubSearchQueryOrderby = typeof ClubSearchQueryOrderby[keyof typeof ClubSearchQueryOrderby];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClubSearchQueryOrderby = {
  mal_id: 'mal_id',
  name: 'name',
  members_count: 'members_count',
  created: 'created',
} as const;

/**
 * Club Search Query Category
 */
export type ClubSearchQueryCategory = typeof ClubSearchQueryCategory[keyof typeof ClubSearchQueryCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClubSearchQueryCategory = {
  anime: 'anime',
  manga: 'manga',
  actors_and_artists: 'actors_and_artists',
  characters: 'characters',
  cities_and_neighborhoods: 'cities_and_neighborhoods',
  companies: 'companies',
  conventions: 'conventions',
  games: 'games',
  japan: 'japan',
  music: 'music',
  other: 'other',
  schools: 'schools',
} as const;

/**
 * Available Character order_by properties
 */
export type CharactersSearchQueryOrderby = typeof CharactersSearchQueryOrderby[keyof typeof CharactersSearchQueryOrderby];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CharactersSearchQueryOrderby = {
  mal_id: 'mal_id',
  name: 'name',
  favorites: 'favorites',
} as const;

/**
 * Available Anime types
 */
export type AnimeSearchQueryType = typeof AnimeSearchQueryType[keyof typeof AnimeSearchQueryType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeSearchQueryType = {
  tv: 'tv',
  movie: 'movie',
  ova: 'ova',
  special: 'special',
  ona: 'ona',
  music: 'music',
  cm: 'cm',
  pv: 'pv',
  tv_special: 'tv_special',
} as const;

/**
 * Available Anime statuses
 */
export type AnimeSearchQueryStatus = typeof AnimeSearchQueryStatus[keyof typeof AnimeSearchQueryStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeSearchQueryStatus = {
  airing: 'airing',
  complete: 'complete',
  upcoming: 'upcoming',
} as const;

/**
 * Available Anime audience ratings<br><br><b>Ratings</b><br><ul><li>G - All Ages</li><li>PG - Children</li><li>PG-13 - Teens 13 or older</li><li>R - 17+ (violence & profanity)</li><li>R+ - Mild Nudity</li><li>Rx - Hentai</li></ul>
 */
export type AnimeSearchQueryRating = typeof AnimeSearchQueryRating[keyof typeof AnimeSearchQueryRating];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeSearchQueryRating = {
  g: 'g',
  pg: 'pg',
  pg13: 'pg13',
  r17: 'r17',
  r: 'r',
  rx: 'rx',
} as const;

/**
 * Available Anime order_by properties
 */
export type AnimeSearchQueryOrderby = typeof AnimeSearchQueryOrderby[keyof typeof AnimeSearchQueryOrderby];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeSearchQueryOrderby = {
  mal_id: 'mal_id',
  title: 'title',
  start_date: 'start_date',
  end_date: 'end_date',
  episodes: 'episodes',
  score: 'score',
  scored_by: 'scored_by',
  rank: 'rank',
  popularity: 'popularity',
  members: 'members',
  favorites: 'favorites',
} as const;

/**
 * User's anime list status filter options
 */
export type UserAnimeListStatusFilter = typeof UserAnimeListStatusFilter[keyof typeof UserAnimeListStatusFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserAnimeListStatusFilter = {
  all: 'all',
  watching: 'watching',
  completed: 'completed',
  onhold: 'onhold',
  dropped: 'dropped',
  plantowatch: 'plantowatch',
} as const;




type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  export const getAnimeFullById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetAnimeFullById200>(
      {url: `/anime/${id}/full`, method: 'GET'
    },
      options);
    }
  
export const getAnimeById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetAnimeById200>(
      {url: `/anime/${id}`, method: 'GET'
    },
      options);
    }
  
export const getAnimeCharacters = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeCharacters>(
      {url: `/anime/${id}/characters`, method: 'GET'
    },
      options);
    }
  
export const getAnimeStaff = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeStaff>(
      {url: `/anime/${id}/staff`, method: 'GET'
    },
      options);
    }
  
export const getAnimeEpisodes = (
    id: number,
    params?: GetAnimeEpisodesParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeEpisodes>(
      {url: `/anime/${id}/episodes`, method: 'GET',
        params
    },
      options);
    }
  
export const getAnimeEpisodeById = (
    id: number,
    episode: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetAnimeEpisodeById200>(
      {url: `/anime/${id}/episodes/${episode}`, method: 'GET'
    },
      options);
    }
  
export const getAnimeNews = (
    id: number,
    params?: GetAnimeNewsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeNews>(
      {url: `/anime/${id}/news`, method: 'GET',
        params
    },
      options);
    }
  
export const getAnimeForum = (
    id: number,
    params?: GetAnimeForumParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Forum>(
      {url: `/anime/${id}/forum`, method: 'GET',
        params
    },
      options);
    }
  
export const getAnimeVideos = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeVideos>(
      {url: `/anime/${id}/videos`, method: 'GET'
    },
      options);
    }
  
export const getAnimeVideosEpisodes = (
    id: number,
    params?: GetAnimeVideosEpisodesParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeVideosEpisodes>(
      {url: `/anime/${id}/videos/episodes`, method: 'GET',
        params
    },
      options);
    }
  
export const getAnimePictures = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<PicturesVariants>(
      {url: `/anime/${id}/pictures`, method: 'GET'
    },
      options);
    }
  
export const getAnimeStatistics = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeStatistics>(
      {url: `/anime/${id}/statistics`, method: 'GET'
    },
      options);
    }
  
export const getAnimeMoreInfo = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Moreinfo>(
      {url: `/anime/${id}/moreinfo`, method: 'GET'
    },
      options);
    }
  
export const getAnimeRecommendations = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<EntryRecommendations>(
      {url: `/anime/${id}/recommendations`, method: 'GET'
    },
      options);
    }
  
export const getAnimeUserUpdates = (
    id: number,
    params?: GetAnimeUserUpdatesParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeUserupdates>(
      {url: `/anime/${id}/userupdates`, method: 'GET',
        params
    },
      options);
    }
  
export const getAnimeReviews = (
    id: number,
    params?: GetAnimeReviewsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeReviews>(
      {url: `/anime/${id}/reviews`, method: 'GET',
        params
    },
      options);
    }
  
export const getAnimeRelations = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetAnimeRelations200>(
      {url: `/anime/${id}/relations`, method: 'GET'
    },
      options);
    }
  
export const getAnimeThemes = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeThemes>(
      {url: `/anime/${id}/themes`, method: 'GET'
    },
      options);
    }
  
export const getAnimeExternal = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<ExternalLinks>(
      {url: `/anime/${id}/external`, method: 'GET'
    },
      options);
    }
  
export const getAnimeStreaming = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<ExternalLinks>(
      {url: `/anime/${id}/streaming`, method: 'GET'
    },
      options);
    }
  
export const getCharacterFullById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetCharacterFullById200>(
      {url: `/characters/${id}/full`, method: 'GET'
    },
      options);
    }
  
export const getCharacterById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetCharacterById200>(
      {url: `/characters/${id}`, method: 'GET'
    },
      options);
    }
  
export const getCharacterAnime = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<CharacterAnime>(
      {url: `/characters/${id}/anime`, method: 'GET'
    },
      options);
    }
  
export const getCharacterManga = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<CharacterManga>(
      {url: `/characters/${id}/manga`, method: 'GET'
    },
      options);
    }
  
export const getCharacterVoiceActors = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<CharacterVoiceActors>(
      {url: `/characters/${id}/voices`, method: 'GET'
    },
      options);
    }
  
export const getCharacterPictures = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<CharacterPictures>(
      {url: `/characters/${id}/pictures`, method: 'GET'
    },
      options);
    }
  
export const getClubsById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetClubsById200>(
      {url: `/clubs/${id}`, method: 'GET'
    },
      options);
    }
  
export const getClubMembers = (
    id: number,
    params?: GetClubMembersParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetClubMembers200>(
      {url: `/clubs/${id}/members`, method: 'GET',
        params
    },
      options);
    }
  
export const getClubStaff = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<ClubStaff>(
      {url: `/clubs/${id}/staff`, method: 'GET'
    },
      options);
    }
  
export const getClubRelations = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<ClubRelations>(
      {url: `/clubs/${id}/relations`, method: 'GET'
    },
      options);
    }
  
export const getAnimeGenres = (
    params?: GetAnimeGenresParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Genres>(
      {url: `/genres/anime`, method: 'GET',
        params
    },
      options);
    }
  
export const getMangaGenres = (
    params?: GetMangaGenresParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Genres>(
      {url: `/genres/manga`, method: 'GET',
        params
    },
      options);
    }
  
export const getMagazines = (
    params?: GetMagazinesParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Magazines>(
      {url: `/magazines`, method: 'GET',
        params
    },
      options);
    }
  
export const getMangaFullById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetMangaFullById200>(
      {url: `/manga/${id}/full`, method: 'GET'
    },
      options);
    }
  
export const getMangaById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetMangaById200>(
      {url: `/manga/${id}`, method: 'GET'
    },
      options);
    }
  
export const getMangaCharacters = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<MangaCharacters>(
      {url: `/manga/${id}/characters`, method: 'GET'
    },
      options);
    }
  
export const getMangaNews = (
    id: number,
    params?: GetMangaNewsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<MangaNews>(
      {url: `/manga/${id}/news`, method: 'GET',
        params
    },
      options);
    }
  
export const getMangaTopics = (
    id: number,
    params?: GetMangaTopicsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Forum>(
      {url: `/manga/${id}/forum`, method: 'GET',
        params
    },
      options);
    }
  
export const getMangaPictures = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<MangaPictures>(
      {url: `/manga/${id}/pictures`, method: 'GET'
    },
      options);
    }
  
export const getMangaStatistics = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<MangaStatistics>(
      {url: `/manga/${id}/statistics`, method: 'GET'
    },
      options);
    }
  
export const getMangaMoreInfo = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Moreinfo>(
      {url: `/manga/${id}/moreinfo`, method: 'GET'
    },
      options);
    }
  
export const getMangaRecommendations = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<EntryRecommendations>(
      {url: `/manga/${id}/recommendations`, method: 'GET'
    },
      options);
    }
  
export const getMangaUserUpdates = (
    id: number,
    params?: GetMangaUserUpdatesParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<MangaUserupdates>(
      {url: `/manga/${id}/userupdates`, method: 'GET',
        params
    },
      options);
    }
  
export const getMangaReviews = (
    id: number,
    params?: GetMangaReviewsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<MangaReviews>(
      {url: `/manga/${id}/reviews`, method: 'GET',
        params
    },
      options);
    }
  
export const getMangaRelations = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetMangaRelations200>(
      {url: `/manga/${id}/relations`, method: 'GET'
    },
      options);
    }
  
export const getMangaExternal = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<ExternalLinks>(
      {url: `/manga/${id}/external`, method: 'GET'
    },
      options);
    }
  
export const getPersonFullById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetPersonFullById200>(
      {url: `/people/${id}/full`, method: 'GET'
    },
      options);
    }
  
export const getPersonById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetPersonById200>(
      {url: `/people/${id}`, method: 'GET'
    },
      options);
    }
  
export const getPersonAnime = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<PersonAnime>(
      {url: `/people/${id}/anime`, method: 'GET'
    },
      options);
    }
  
export const getPersonVoices = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<PersonVoiceActingRoles>(
      {url: `/people/${id}/voices`, method: 'GET'
    },
      options);
    }
  
export const getPersonManga = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<PersonManga>(
      {url: `/people/${id}/manga`, method: 'GET'
    },
      options);
    }
  
export const getPersonPictures = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<PersonPictures>(
      {url: `/people/${id}/pictures`, method: 'GET'
    },
      options);
    }
  
export const getProducerById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetProducerById200>(
      {url: `/producers/${id}`, method: 'GET'
    },
      options);
    }
  
export const getProducerFullById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetProducerFullById200>(
      {url: `/producers/${id}/full`, method: 'GET'
    },
      options);
    }
  
export const getProducerExternal = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<ExternalLinks>(
      {url: `/producers/${id}/external`, method: 'GET'
    },
      options);
    }
  
export const getRandomAnime = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetRandomAnime200>(
      {url: `/random/anime`, method: 'GET'
    },
      options);
    }
  
export const getRandomManga = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetRandomManga200>(
      {url: `/random/manga`, method: 'GET'
    },
      options);
    }
  
export const getRandomCharacters = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetRandomCharacters200>(
      {url: `/random/characters`, method: 'GET'
    },
      options);
    }
  
export const getRandomPeople = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetRandomPeople200>(
      {url: `/random/people`, method: 'GET'
    },
      options);
    }
  
export const getRandomUsers = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetRandomUsers200>(
      {url: `/random/users`, method: 'GET'
    },
      options);
    }
  
export const getRecentAnimeRecommendations = (
    params?: GetRecentAnimeRecommendationsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Recommendations>(
      {url: `/recommendations/anime`, method: 'GET',
        params
    },
      options);
    }
  
export const getRecentMangaRecommendations = (
    params?: GetRecentMangaRecommendationsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Recommendations>(
      {url: `/recommendations/manga`, method: 'GET',
        params
    },
      options);
    }
  
export const getRecentAnimeReviews = (
    params?: GetRecentAnimeReviewsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<unknown>(
      {url: `/reviews/anime`, method: 'GET',
        params
    },
      options);
    }
  
export const getRecentMangaReviews = (
    params?: GetRecentMangaReviewsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<unknown>(
      {url: `/reviews/manga`, method: 'GET',
        params
    },
      options);
    }
  
export const getSchedules = (
    params?: GetSchedulesParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Schedules>(
      {url: `/schedules`, method: 'GET',
        params
    },
      options);
    }
  
export const getAnimeSearch = (
    params?: GetAnimeSearchParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeSearch>(
      {url: `/anime`, method: 'GET',
        params
    },
      options);
    }
  
export const getMangaSearch = (
    params?: GetMangaSearchParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<MangaSearch>(
      {url: `/manga`, method: 'GET',
        params
    },
      options);
    }
  
export const getPeopleSearch = (
    params?: GetPeopleSearchParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<PeopleSearch>(
      {url: `/people`, method: 'GET',
        params
    },
      options);
    }
  
export const getCharactersSearch = (
    params?: GetCharactersSearchParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<CharactersSearch>(
      {url: `/characters`, method: 'GET',
        params
    },
      options);
    }
  
export const getUsersSearch = (
    params?: GetUsersSearchParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<UsersSearch>(
      {url: `/users`, method: 'GET',
        params
    },
      options);
    }
  
export const getUserById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetUserById200>(
      {url: `/users/userbyid/${id}`, method: 'GET'
    },
      options);
    }
  
export const getClubsSearch = (
    params?: GetClubsSearchParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<ClubsSearch>(
      {url: `/clubs`, method: 'GET',
        params
    },
      options);
    }
  
export const getProducers = (
    params?: GetProducersParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Producers>(
      {url: `/producers`, method: 'GET',
        params
    },
      options);
    }
  
export const getSeasonNow = (
    params?: GetSeasonNowParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeSearch>(
      {url: `/seasons/now`, method: 'GET',
        params
    },
      options);
    }
  
export const getSeason = (
    year: number,
    season: string,
    params?: GetSeasonParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeSearch>(
      {url: `/seasons/${year}/${season}`, method: 'GET',
        params
    },
      options);
    }
  
export const getSeasonsList = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Seasons>(
      {url: `/seasons`, method: 'GET'
    },
      options);
    }
  
export const getSeasonUpcoming = (
    params?: GetSeasonUpcomingParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeSearch>(
      {url: `/seasons/upcoming`, method: 'GET',
        params
    },
      options);
    }
  
export const getTopAnime = (
    params?: GetTopAnimeParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeSearch>(
      {url: `/top/anime`, method: 'GET',
        params
    },
      options);
    }
  
export const getTopManga = (
    params?: GetTopMangaParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<MangaSearch>(
      {url: `/top/manga`, method: 'GET',
        params
    },
      options);
    }
  
export const getTopPeople = (
    params?: GetTopPeopleParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<PeopleSearch>(
      {url: `/top/people`, method: 'GET',
        params
    },
      options);
    }
  
export const getTopCharacters = (
    params?: GetTopCharactersParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<CharactersSearch>(
      {url: `/top/characters`, method: 'GET',
        params
    },
      options);
    }
  
export const getTopReviews = (
    params?: GetTopReviewsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetTopReviews200>(
      {url: `/top/reviews`, method: 'GET',
        params
    },
      options);
    }
  
export const getUserFullProfile = (
    username: string,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetUserFullProfile200>(
      {url: `/users/${username}/full`, method: 'GET'
    },
      options);
    }
  
export const getUserProfile = (
    username: string,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetUserProfile200>(
      {url: `/users/${username}`, method: 'GET'
    },
      options);
    }
  
export const getUserStatistics = (
    username: string,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<UserStatistics>(
      {url: `/users/${username}/statistics`, method: 'GET'
    },
      options);
    }
  
export const getUserFavorites = (
    username: string,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetUserFavorites200>(
      {url: `/users/${username}/favorites`, method: 'GET'
    },
      options);
    }
  
export const getUserUpdates = (
    username: string,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<UserUpdates>(
      {url: `/users/${username}/userupdates`, method: 'GET'
    },
      options);
    }
  
export const getUserAbout = (
    username: string,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<UserAbout>(
      {url: `/users/${username}/about`, method: 'GET'
    },
      options);
    }
  
export const getUserHistory = (
    username: string,
    params?: GetUserHistoryParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<UserHistory>(
      {url: `/users/${username}/history`, method: 'GET',
        params
    },
      options);
    }
  
export const getUserFriends = (
    username: string,
    params?: GetUserFriendsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<UserFriends>(
      {url: `/users/${username}/friends`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * User Anime lists have been discontinued since May 1st, 2022. <a href='https://docs.google.com/document/d/1-6H-agSnqa8Mfmw802UYfGQrceIEnAaEh4uCXAPiX5A'>Read more</a>
 * @deprecated
 */
export const getUserAnimelist = (
    username: string,
    params?: GetUserAnimelistParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<unknown>(
      {url: `/users/${username}/animelist`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * User Manga lists have been discontinued since May 1st, 2022. <a href='https://docs.google.com/document/d/1-6H-agSnqa8Mfmw802UYfGQrceIEnAaEh4uCXAPiX5A'>Read more</a>
 * @deprecated
 */
export const getUserMangaList = (
    username: string,
    params?: GetUserMangaListParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<unknown>(
      {url: `/users/${username}/mangalist`, method: 'GET',
        params
    },
      options);
    }
  
export const getUserReviews = (
    username: string,
    params?: GetUserReviewsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetUserReviews200>(
      {url: `/users/${username}/reviews`, method: 'GET',
        params
    },
      options);
    }
  
export const getUserRecommendations = (
    username: string,
    params?: GetUserRecommendationsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Recommendations>(
      {url: `/users/${username}/recommendations`, method: 'GET',
        params
    },
      options);
    }
  
export const getUserClubs = (
    username: string,
    params?: GetUserClubsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<UserClubs>(
      {url: `/users/${username}/clubs`, method: 'GET',
        params
    },
      options);
    }
  
export const getUserExternal = (
    username: string,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<ExternalLinks>(
      {url: `/users/${username}/external`, method: 'GET'
    },
      options);
    }
  
export const getWatchRecentEpisodes = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<WatchEpisodes>(
      {url: `/watch/episodes`, method: 'GET'
    },
      options);
    }
  
export const getWatchPopularEpisodes = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<WatchEpisodes>(
      {url: `/watch/episodes/popular`, method: 'GET'
    },
      options);
    }
  
export const getWatchRecentPromos = (
    params?: GetWatchRecentPromosParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<WatchPromos>(
      {url: `/watch/promos`, method: 'GET',
        params
    },
      options);
    }
  
export const getWatchPopularPromos = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<WatchPromos>(
      {url: `/watch/promos/popular`, method: 'GET'
    },
      options);
    }
  
export type GetAnimeFullByIdResult = NonNullable<Awaited<ReturnType<typeof getAnimeFullById>>>
export type GetAnimeByIdResult = NonNullable<Awaited<ReturnType<typeof getAnimeById>>>
export type GetAnimeCharactersResult = NonNullable<Awaited<ReturnType<typeof getAnimeCharacters>>>
export type GetAnimeStaffResult = NonNullable<Awaited<ReturnType<typeof getAnimeStaff>>>
export type GetAnimeEpisodesResult = NonNullable<Awaited<ReturnType<typeof getAnimeEpisodes>>>
export type GetAnimeEpisodeByIdResult = NonNullable<Awaited<ReturnType<typeof getAnimeEpisodeById>>>
export type GetAnimeNewsResult = NonNullable<Awaited<ReturnType<typeof getAnimeNews>>>
export type GetAnimeForumResult = NonNullable<Awaited<ReturnType<typeof getAnimeForum>>>
export type GetAnimeVideosResult = NonNullable<Awaited<ReturnType<typeof getAnimeVideos>>>
export type GetAnimeVideosEpisodesResult = NonNullable<Awaited<ReturnType<typeof getAnimeVideosEpisodes>>>
export type GetAnimePicturesResult = NonNullable<Awaited<ReturnType<typeof getAnimePictures>>>
export type GetAnimeStatisticsResult = NonNullable<Awaited<ReturnType<typeof getAnimeStatistics>>>
export type GetAnimeMoreInfoResult = NonNullable<Awaited<ReturnType<typeof getAnimeMoreInfo>>>
export type GetAnimeRecommendationsResult = NonNullable<Awaited<ReturnType<typeof getAnimeRecommendations>>>
export type GetAnimeUserUpdatesResult = NonNullable<Awaited<ReturnType<typeof getAnimeUserUpdates>>>
export type GetAnimeReviewsResult = NonNullable<Awaited<ReturnType<typeof getAnimeReviews>>>
export type GetAnimeRelationsResult = NonNullable<Awaited<ReturnType<typeof getAnimeRelations>>>
export type GetAnimeThemesResult = NonNullable<Awaited<ReturnType<typeof getAnimeThemes>>>
export type GetAnimeExternalResult = NonNullable<Awaited<ReturnType<typeof getAnimeExternal>>>
export type GetAnimeStreamingResult = NonNullable<Awaited<ReturnType<typeof getAnimeStreaming>>>
export type GetCharacterFullByIdResult = NonNullable<Awaited<ReturnType<typeof getCharacterFullById>>>
export type GetCharacterByIdResult = NonNullable<Awaited<ReturnType<typeof getCharacterById>>>
export type GetCharacterAnimeResult = NonNullable<Awaited<ReturnType<typeof getCharacterAnime>>>
export type GetCharacterMangaResult = NonNullable<Awaited<ReturnType<typeof getCharacterManga>>>
export type GetCharacterVoiceActorsResult = NonNullable<Awaited<ReturnType<typeof getCharacterVoiceActors>>>
export type GetCharacterPicturesResult = NonNullable<Awaited<ReturnType<typeof getCharacterPictures>>>
export type GetClubsByIdResult = NonNullable<Awaited<ReturnType<typeof getClubsById>>>
export type GetClubMembersResult = NonNullable<Awaited<ReturnType<typeof getClubMembers>>>
export type GetClubStaffResult = NonNullable<Awaited<ReturnType<typeof getClubStaff>>>
export type GetClubRelationsResult = NonNullable<Awaited<ReturnType<typeof getClubRelations>>>
export type GetAnimeGenresResult = NonNullable<Awaited<ReturnType<typeof getAnimeGenres>>>
export type GetMangaGenresResult = NonNullable<Awaited<ReturnType<typeof getMangaGenres>>>
export type GetMagazinesResult = NonNullable<Awaited<ReturnType<typeof getMagazines>>>
export type GetMangaFullByIdResult = NonNullable<Awaited<ReturnType<typeof getMangaFullById>>>
export type GetMangaByIdResult = NonNullable<Awaited<ReturnType<typeof getMangaById>>>
export type GetMangaCharactersResult = NonNullable<Awaited<ReturnType<typeof getMangaCharacters>>>
export type GetMangaNewsResult = NonNullable<Awaited<ReturnType<typeof getMangaNews>>>
export type GetMangaTopicsResult = NonNullable<Awaited<ReturnType<typeof getMangaTopics>>>
export type GetMangaPicturesResult = NonNullable<Awaited<ReturnType<typeof getMangaPictures>>>
export type GetMangaStatisticsResult = NonNullable<Awaited<ReturnType<typeof getMangaStatistics>>>
export type GetMangaMoreInfoResult = NonNullable<Awaited<ReturnType<typeof getMangaMoreInfo>>>
export type GetMangaRecommendationsResult = NonNullable<Awaited<ReturnType<typeof getMangaRecommendations>>>
export type GetMangaUserUpdatesResult = NonNullable<Awaited<ReturnType<typeof getMangaUserUpdates>>>
export type GetMangaReviewsResult = NonNullable<Awaited<ReturnType<typeof getMangaReviews>>>
export type GetMangaRelationsResult = NonNullable<Awaited<ReturnType<typeof getMangaRelations>>>
export type GetMangaExternalResult = NonNullable<Awaited<ReturnType<typeof getMangaExternal>>>
export type GetPersonFullByIdResult = NonNullable<Awaited<ReturnType<typeof getPersonFullById>>>
export type GetPersonByIdResult = NonNullable<Awaited<ReturnType<typeof getPersonById>>>
export type GetPersonAnimeResult = NonNullable<Awaited<ReturnType<typeof getPersonAnime>>>
export type GetPersonVoicesResult = NonNullable<Awaited<ReturnType<typeof getPersonVoices>>>
export type GetPersonMangaResult = NonNullable<Awaited<ReturnType<typeof getPersonManga>>>
export type GetPersonPicturesResult = NonNullable<Awaited<ReturnType<typeof getPersonPictures>>>
export type GetProducerByIdResult = NonNullable<Awaited<ReturnType<typeof getProducerById>>>
export type GetProducerFullByIdResult = NonNullable<Awaited<ReturnType<typeof getProducerFullById>>>
export type GetProducerExternalResult = NonNullable<Awaited<ReturnType<typeof getProducerExternal>>>
export type GetRandomAnimeResult = NonNullable<Awaited<ReturnType<typeof getRandomAnime>>>
export type GetRandomMangaResult = NonNullable<Awaited<ReturnType<typeof getRandomManga>>>
export type GetRandomCharactersResult = NonNullable<Awaited<ReturnType<typeof getRandomCharacters>>>
export type GetRandomPeopleResult = NonNullable<Awaited<ReturnType<typeof getRandomPeople>>>
export type GetRandomUsersResult = NonNullable<Awaited<ReturnType<typeof getRandomUsers>>>
export type GetRecentAnimeRecommendationsResult = NonNullable<Awaited<ReturnType<typeof getRecentAnimeRecommendations>>>
export type GetRecentMangaRecommendationsResult = NonNullable<Awaited<ReturnType<typeof getRecentMangaRecommendations>>>
export type GetRecentAnimeReviewsResult = NonNullable<Awaited<ReturnType<typeof getRecentAnimeReviews>>>
export type GetRecentMangaReviewsResult = NonNullable<Awaited<ReturnType<typeof getRecentMangaReviews>>>
export type GetSchedulesResult = NonNullable<Awaited<ReturnType<typeof getSchedules>>>
export type GetAnimeSearchResult = NonNullable<Awaited<ReturnType<typeof getAnimeSearch>>>
export type GetMangaSearchResult = NonNullable<Awaited<ReturnType<typeof getMangaSearch>>>
export type GetPeopleSearchResult = NonNullable<Awaited<ReturnType<typeof getPeopleSearch>>>
export type GetCharactersSearchResult = NonNullable<Awaited<ReturnType<typeof getCharactersSearch>>>
export type GetUsersSearchResult = NonNullable<Awaited<ReturnType<typeof getUsersSearch>>>
export type GetUserByIdResult = NonNullable<Awaited<ReturnType<typeof getUserById>>>
export type GetClubsSearchResult = NonNullable<Awaited<ReturnType<typeof getClubsSearch>>>
export type GetProducersResult = NonNullable<Awaited<ReturnType<typeof getProducers>>>
export type GetSeasonNowResult = NonNullable<Awaited<ReturnType<typeof getSeasonNow>>>
export type GetSeasonResult = NonNullable<Awaited<ReturnType<typeof getSeason>>>
export type GetSeasonsListResult = NonNullable<Awaited<ReturnType<typeof getSeasonsList>>>
export type GetSeasonUpcomingResult = NonNullable<Awaited<ReturnType<typeof getSeasonUpcoming>>>
export type GetTopAnimeResult = NonNullable<Awaited<ReturnType<typeof getTopAnime>>>
export type GetTopMangaResult = NonNullable<Awaited<ReturnType<typeof getTopManga>>>
export type GetTopPeopleResult = NonNullable<Awaited<ReturnType<typeof getTopPeople>>>
export type GetTopCharactersResult = NonNullable<Awaited<ReturnType<typeof getTopCharacters>>>
export type GetTopReviewsResult = NonNullable<Awaited<ReturnType<typeof getTopReviews>>>
export type GetUserFullProfileResult = NonNullable<Awaited<ReturnType<typeof getUserFullProfile>>>
export type GetUserProfileResult = NonNullable<Awaited<ReturnType<typeof getUserProfile>>>
export type GetUserStatisticsResult = NonNullable<Awaited<ReturnType<typeof getUserStatistics>>>
export type GetUserFavoritesResult = NonNullable<Awaited<ReturnType<typeof getUserFavorites>>>
export type GetUserUpdatesResult = NonNullable<Awaited<ReturnType<typeof getUserUpdates>>>
export type GetUserAboutResult = NonNullable<Awaited<ReturnType<typeof getUserAbout>>>
export type GetUserHistoryResult = NonNullable<Awaited<ReturnType<typeof getUserHistory>>>
export type GetUserFriendsResult = NonNullable<Awaited<ReturnType<typeof getUserFriends>>>
export type GetUserAnimelistResult = NonNullable<Awaited<ReturnType<typeof getUserAnimelist>>>
export type GetUserMangaListResult = NonNullable<Awaited<ReturnType<typeof getUserMangaList>>>
export type GetUserReviewsResult = NonNullable<Awaited<ReturnType<typeof getUserReviews>>>
export type GetUserRecommendationsResult = NonNullable<Awaited<ReturnType<typeof getUserRecommendations>>>
export type GetUserClubsResult = NonNullable<Awaited<ReturnType<typeof getUserClubs>>>
export type GetUserExternalResult = NonNullable<Awaited<ReturnType<typeof getUserExternal>>>
export type GetWatchRecentEpisodesResult = NonNullable<Awaited<ReturnType<typeof getWatchRecentEpisodes>>>
export type GetWatchPopularEpisodesResult = NonNullable<Awaited<ReturnType<typeof getWatchPopularEpisodes>>>
export type GetWatchRecentPromosResult = NonNullable<Awaited<ReturnType<typeof getWatchRecentPromos>>>
export type GetWatchPopularPromosResult = NonNullable<Awaited<ReturnType<typeof getWatchPopularPromos>>>
